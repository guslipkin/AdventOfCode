---
title: "17: "
format: html
---

```{r}
#| message: false
library(mistlecode)

options(scipen = 999)
```

```{r}
mat <- 
  readLines("input2.txt") |>
  stringr::str_split("", simplify = TRUE)
```

## Part 1

```{r}
adjacent <- function(point, mat) {
  y <- point[1]; x <- point[2];
  tibble::tibble(
    'y' = c(y-1, y+1, y,   y),
    'x' = c(x,   x,   x-1, x+1),
    'dir' = c('up', 'down', 'left', 'right')
  ) |>
    dplyr::filter(
      dplyr::between(.data$y, 1, nrow(mat)),
      dplyr::between(.data$x, 1, ncol(mat))
    ) |>
    purrr::pmap(\(y, x, dir) {
      list('node' = c(y, x), 'dir' = dir)
    })
}

hash <- function(x) paste0(x, collapse = ' ')
```

```{r}
find_path <- function(mat, current, end, neighbors = adjacent, cost = function(x, y, mat) mat[y[1], y[2]]) {

  open_list <- collections::priority_queue()$clear()$push(list('node' = current, 'dir' = 'start'), 0)
  g_score <- matrix(Inf, nrow = nrow(mat), ncol = ncol(mat))
  f_score <- matrix(Inf, nrow = nrow(mat), ncol = ncol(mat))
  g_score[current[1], current[2]] <- 0
  f_score[current[1], current[2]] <- dist(rbind(current, end), method = 'manhattan')[1]

  came_from <- list()
  dir_list <- list()
  dir_list[[hash(current)]] <- 'start'
  dir <- rep('', 3)

  while (open_list$size() > 0) {
    current_node <- open_list$pop()
    if (all(dir == current_node$dir)) next else dir <- c(dir[2:3], current_node$dir) |> print()
    current_node <- current_node$node
    if (all(current_node == end)) {
      path <- list()
      node <- current_node
      while (!is.null(came_from[[hash(node)]])) {
        path <- append(path, list(node))
        node <- came_from[[hash(node)]]
      }
      path <-
        path |>
        append(list(current)) |>
        rev()
      return(list('path' = path[-1], 'cost' = g_score[end[1], end[2]]))
    }
    for (neighbor in neighbors(current_node, mat)) {
      neighbor_dir <- neighbor$dir; neighbor <- neighbor$node;
      move_cost <- cost(current_node, neighbor, mat) |> as.integer()
      if (is.na(move_cost) || move_cost == Inf) next
      tentative_g_score <- g_score[current_node[1], current_node[2]] + move_cost
      if (tentative_g_score < g_score[neighbor[1], neighbor[2]]) {
        came_from[[hash(neighbor)]] <- current_node
        g_score[neighbor[1], neighbor[2]] <- tentative_g_score
        f_score[neighbor[1], neighbor[2]] <- tentative_g_score + dist(rbind(neighbor, end), method = 'manhattan')[1]
        open_list$push(list('node' = neighbor, 'dir' = neighbor_dir), -g_score[neighbor[1], neighbor[2]])
      }
    }
  }
  return(NULL)
}

mat |>
  find_path(c(1,1), c(nrow(mat), ncol(mat))) |>
  purrr::pluck('path') |> # purrr::map_int(\(x) mat[x[1], x[2]] |> as.integer()) |> sum()
  (\(x) { print(length(x)); x; })() |>
  unlist () |>
  matrix(ncol = 2, byrow = TRUE) |>
  tibble::as_tibble() |>
  setNames(c('row', 'col')) |>
  dplyr::mutate('rowId' = dplyr::row_number()) |>
  ggplot2::ggplot(ggplot2::aes(x = col, y = -row)) +
  ggplot2::geom_point(ggplot2::aes(color = rowId), size = 5, shape = 15)
  # ggplot2::geom_text(ggplot2::aes(label = rowId))
```