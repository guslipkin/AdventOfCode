---
title: "2022-06: Tuning Trouble"
format: html
---

```{r}
library(mistlecode)
```

```{r}
dt <- fread("input2.txt", header = FALSE)
```

## Part 1

```{r}
mm <- 
  dt |>
  as.matrix() |>
  as.character() |>
  str_split("", simplify = TRUE) |>
  apply(c(1, 2), as.numeric)

grid <- expand.grid("col" = 1:ncol(mm), "row" = 1:nrow(mm))
mapply(\(x, y) {
  tree <- mm[y, x]
  colMin <- 1; colMax <- ncol(mm)
  rowMin <- 1; rowMax <- nrow(mm)
  if (x == 1 | x == ncol(mm) | y == 1 | y == nrow(mm)) { return(c(x, y)) }
  # print(paste(y, x))
  # print(tree)
  # print(all(mm[(y+1):nrow(mm),x] < tree, na.rm = TRUE))
  #      print(all(mm[1:(y-1),x] < tree, na.rm = TRUE))
  #      print(all(mm[y,1:(x-1)] < tree, na.rm = TRUE))
  #      print(all(mm[y,(x+1):ncol(mm)] < tree, na.rm = TRUE))
  if (all(mm[(y+1):nrow(mm),x] < tree, na.rm = TRUE) | 
      all(mm[1:(y-1),x] < tree, na.rm = TRUE) | 
      all(mm[y,1:(x-1)] < tree, na.rm = TRUE) | 
      all(mm[y,(x+1):ncol(mm)] < tree, na.rm = TRUE)) { return(c(x, y)) }
}, grid$col, grid$row) -> m

m[!sapply(m, is.null)] %>%
  do.call(rbind, .) |>
  data.frame() |>
  `colnames<-`(c("col", "row")) -> mi
nrow(mi)
# coords_to_matrix(rep("X", nrow(mi)), mi$row, mi$col)
```

## Part 2

```{r}
library(purrr)
scenic <- matrix(NA, nrow(mm), ncol(mm))
biggest <- function(i, tree) { i < tree }
mapply(\(y, x) {
  tree <- mm[y, x]
  rowMin <- ifelse(y - 1 < 1, 1, y - 1); rowMax <- ifelse(y + 1 > nrow(mm), nrow(mm), y + 1)
  colMin <- ifelse(x - 1 < 1, 1, x - 1); colMax <- ifelse(x + 1 > ncol(mm), ncol(mm), x + 1)
  
  yMin <- ifelse(y - 1 < 1, 1, y - 1); yMax <- ifelse(y + 1 > nrow(mm), nrow(mm), y + 1)
  xMin <- ifelse(x - 1 < 1, 1, x - 1); xMax <- ifelse(x + 1 > ncol(mm), ncol(mm), x + 1)
  
  # up <- detect_index(mm[1:yMin, x], biggest, .dir = "backward", tree = tree)
  # left <- detect_index(mm[y, 1:xMin], biggest, .dir = "backward", tree = tree)
  # right <- detect_index(mm[y, xMax:ncol(mm)], biggest, .dir = "forward", tree = tree)
  # down <- detect_index(mm[rowMax:nrow(mm), x], biggest, .dir = "forward", tree = tree)
  
  up <- mm[1:yMin, x][unlist(slide(mm[1:yMin, x], biggest, .before = Inf, tree = tree))]
  print(paste(y, x))
  print(up)
  # print(paste(y, x))
  # print(paste(up, left, right, down))
  # 
  # scene <- c(up, left, right, down)
  # # print(scene)
  # scenic[y,x] <<- prod(scene[scene != 0])
}, grid$row, grid$col) |> invisible()
scenic
```


```{r}
maxMaster <- 1
max <- 0
dist <- 1
scenic <- mm

biggest_visible <- function(tree, x) {
  biggest <- tree
  breakFlag <- FALSE
  # print(paste("x:", x))
  for(i in 1:length(x)) {
    if (x[i] == tree & i == 1) { return(1) }
    else if (x[i] > tree & x[i] > biggest) {
      biggest <- x[i]
    }
  }
  if (length(x) > 1) {
    smallest <- x[1]
    for (i in 2:length(x)) {
      if (x[i] >= smallest) {
        smallest <- x[i]
      }
    }
    if (all(smallest >= x)) {
      return(length(x))
    }
  }
  if (biggest == tree) { return(length(x[x < tree])) }
  # if (breakFlag) { return(1) }
  which(x == biggest)[1]
}
mapply(\(y, x) {
  tree <- mm[y, x]
  rowMin <- ifelse(y-1 < 1, 1, y-1); rowMax <- ifelse(y+1 > nrow(mm), nrow(mm), y + 1)
  colMin <- ifelse(x-1 < 1, 1, x-1); colMax <- ifelse(x+1 > ncol(mm), ncol(mm), x + 1)
  
  yMin <- ifelse(y-1 < 1, 1, y-1); yMax <- ifelse(y+1 > nrow(mm), nrow(mm), y + 1)
  xMin <- ifelse(x-1 < 1, 1, x-1); xMax <- ifelse(x+1 > ncol(mm), ncol(mm), x + 1)
  
  up <- biggest_visible(tree, rev(mm[1:yMin, x]))
  left <- biggest_visible(tree, rev(mm[y, 1:xMin]))
  right <- biggest_visible(tree, mm[y, xMax:ncol(mm)])
  down <- biggest_visible(tree, mm[rowMax:nrow(mm), x])
  
  # if (is.na(up)) { up <- 0 }
  # if (is.na(left)) { left <- 0 }
  # if (is.na(right)) { right <- 0 }
  # if (is.na(down)) { down <- 0 }
  if(y == 1 & x == 3) {
  print(paste("here", tree))
  # print(biggest_visible(tree, rev(mm[y, 1:xMin])))
  print(paste(up, left, right, down))
  # print(paste(y, x, tree))
  # print(paste(up, left, down, right))
  }
  scene <- c(up, left, right, down)
  scenic[y,x] <<- prod(scene[scene != 0])
}, grid$row, grid$col) |> invisible()
# max(scenic)
scenic
```

< 2202832
  4579200
  4579200