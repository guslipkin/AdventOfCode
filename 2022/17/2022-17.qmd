---
title: "2022-17: Pyroclastic Flow"
format: html
eval: false
---

```{r}
#| message: false
library(mistlecode)

options(scipen = 999)
```

```{r}
dt <- 
  readLines("input.txt") |>
  str_split("") |>
  unlist()

rocks <-
  list(
    matrix("@", 1, 4),
    matrix(c(" ", "@", " ", "@", "@", "@", " ", "@", " "), 3, 3),
    matrix(c(" ", " ", "@", " ", " ", "@", "@", "@", "@"), 3, 3),
    matrix("@", 4, 1),
    matrix("@", 2, 2)
  )
rock_seq <- rep(1:5, length(dt) / 5)

rock_seq <- rep_len(rock_seq, 10000)
# dt <- rep_len(dt, 2022)
```

## Part 1

```{r}
cave <- matrix(" ", 3, 7)

cave_to_matrix <- function(cave) {
  cave |>
    matrix_to_coords() |>
    dplyr::filter(.data$data == '@') |>
    dplyr::select(-'data') |>
    as.matrix()
}

add_row <- function(cave, rock) {
  rbind(
    cbind(
      matrix(" ", nrow(rock), 2), 
      rock, 
      matrix(" ", nrow(rock), 5 - ncol(rock))),
    cave)
}

can_fall <- function(cave) {
  coords <- cave_to_matrix(cave)
  if (any(coords[,"row"] == nrow(cave))) { return(FALSE) }
  apply(coords, 1, \(x) {
    (cave[x["row"] + 1, x["col"]] %in% c("@", " "))
  }) |>
    all()
}

move_rock <- function(cave, dir) {
  x <- cave_to_matrix(cave)

  for (j in 1:nrow(x)) { cave[x[j, "row"], x[j, "col"]] <- " " }
  
  if (dir == "d") {
    x[, "row"] <- x[, "row"] + 1
  } else if (dir == "<" &
             !any(x[, "col"] - 1 < 1) &&
             !any(sapply(1:nrow(x), \(i) {
               cave[x[i, "row"], x[i, "col"] - 1]
             }) == "█")) {
    x[, "col"] <- x[, "col"] - 1
  } else if (dir == ">" &
             !any(x[, "col"] + 1 > 7) &&
             !any(sapply(1:nrow(x), \(i) {
               cave[x[i, "row"], x[i, "col"] + 1]
             }) == "█")) {
    x[, "col"] <- x[, "col"] + 1
  }
  
  for (j in 1:nrow(x)) { cave[x[j,"row"], x[j,"col"]] <- "@" }
  
  return(cave)
}

trim_row <- function(cave) {
  minRow <-
    apply(cave, 2, \(x) { which(x != " ") }) |>
    unlist() |>
    min()
  
  cave[(minRow-3):nrow(cave), 1:7]
}

dirCount <- 1
rowCounter <- 0
for (i in seq_along(rock_seq)) {
  rock <- rocks[[rock_seq[i]]]
  
  cave <- add_row(cave, rock)
  
  cave <- move_rock(cave, dt[dirCount])
  dirCount <- dirCount + 1

  while(can_fall(cave)) {
    dirCount <- dirCount %% length(dt)
    dirCount <- ifelse(dirCount == 0, length(dt), dirCount)
    cave <- move_rock(cave, "d")
    cave <- move_rock(cave, dt[dirCount])
    dirCount <- dirCount + 1
  }
  
  cave <- trim_row(cave)
  x <- cave_to_matrix(cave)
  
  for (j in 1:nrow(x)) { cave[x[j, "row"], x[j, "col"]] <- "█" }
}
nrow(cave) - 3
```

## Part 2

```{r}
# rock_seq <- rep_along(rep(dt, 5), 1:5)

cave <- matrix(" ", 3, 7)

dirCount <- 1
rowCounter <- 0
for (i in seq_along(rock_seq)) {
  rock <- rocks[[rock_seq[i]]]
  
  cave <- add_row(cave, rock)
  
  cave <- move_rock(cave, dt[dirCount])
  dirCount <- dirCount + 1

  while(can_fall(cave)) {
    dirCount <- dirCount %% length(dt)
    dirCount <- ifelse(dirCount == 0, length(dt), dirCount)
    cave <- move_rock(cave, "d")
    cave <- move_rock(cave, dt[dirCount])
    dirCount <- dirCount + 1
    cave
  }
  
  cave <- trim_row(cave)
  x <-
    matrix_to_coords(cave) %>%
    .[.[, "data"] == "@", c("row", "col")]
  x <- 
    matrix(as.numeric(x), nrow(x)) |>
    `colnames<-`(c("row", "col"))
  
  for (j in 1:nrow(x)) { cave[x[j, "row"], x[j, "col"]] <- "█" }
  
  dropRows <- 
    apply(cave, 1, \(x) { all(x == "█") }) |>
    which()
  if (length(dropRows) > 0) { dropRows <- min(dropRows) - 1 }
  if (length(dropRows) == 1 && dropRows != Inf) {
    rowCounter <- rowCounter + (nrow(cave) - dropRows)
    cave <- cave[1:dropRows,]
  }
}
nrow(cave) + rowCounter - 3

apply(cave, 1, \(x) { all(x == "█") }) |>
    which() -> x

x - lag(x)
```

```{r}
cave2 <- cave[4:nrow(cave),]
sapply(1:nrow(cave2), \(x) {
  if (nrow(cave2) %% x != 0) { return(FALSE) }
  all(cave2[x,] == "█")
}) |>
  unlist() |>
  which()

apply(cave2, 1, \(x) { all(x == "█") }) |>
  any()
```

