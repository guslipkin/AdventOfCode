---
title: "09: Rope Bridge"
---

```{r}
#| message: false
library(mistlecode)
library(S7)
```

```{r}
dt <-
  fread("input2.txt") |>
  `colnames<-`(c("dir", "mag")) |>
  expand_directions()
```


## Part 1

```{r}
pythagoras <- function(x1, x2) {
  sqrt(x1^2 + x2^2)
}

end <-
  new_class(
    "end",
    properties = list(
      row = class_numeric,
      col = class_numeric
    )
  )

rope <- 
  new_class(
    "rope",
    properties = list(
      head = end,
      tail = end,
      visited = class_list
    ),
    validator = function(self) {
      if(
        pythagoras(self@head@row, self@tail@row) > sqrt(2) | 
        pythagoras(self@head@col, self@tail@col) > sqrt(2)
        ) {
        "@head cannot be farther than `sqrt(2)` from @tail"
      }
    }
  )

move <- new_generic("move", "x")

method(move, end) <- function(x, dir) {
  if (dir == "R") {
    x@col <- x@col + 1
  } else if (dir == "U") {
    x@row <- x@row + 1
  } else if (dir == "L") {
    x@col <- x@col - 1
  } else if (dir == "D") {
    x@row <- x@row - 1
  }
  x
}

method(move, rope) <- function(x, dir) {
  valid_eventually(x, function(o) {
    he <- move(x@head, dir)
    ta <- x@tail
    pr <- pythagoras(he@row, ta@row)
    if (pr >= sqrt(2)) {
      ta <- x@head
    } else if (pr > sqrt(2)) {
      ta <- x@head
    } else if (pr == 2) {
      ta <- x@head
    } else if (pr == 0) {
      ta
    }
    x@head <- he
    x@tail <- ta
    x
  })
}
```


```{r}
size <- 
  dt |>
  table() |>
  max() |>
  prod(2) |>
  sum(1)
midpoint <- ceiling(size / 2)

rope <- 
  list(
    head = list("row" = midpoint, "col" = midpoint),
    tail = list("row" = midpoint, "col" = midpoint),
    visited = list()
  )

check <- function(head, tail) {
  dist <- 
    sqrt(
      (abs(head$col) - abs(tail$col))^2 + (abs(head$row) - abs(tail$row))^2
    )
  case_when(
    dist < 2 ~ "zero",
    dist == 2 ~ "near",
    dist > 2 ~ "far"
  )
}

move_end <- function(end, dir) {
  if (dir == "R") {
    end$col <- end$col + 1
  } else if (dir == "U") {
    end$row <- end$row + 1
  } else if (dir == "L") {
    end$col <- end$col - 1
  } else if (dir == "D") {
    end$row <- end$row - 1
  }
  end
}

move_rope <- function(rope, dir) {
  nh <- rope$head
  nt <- rope$tail
  
  nh <- move_end(nh, dir)
  q <- check(nh, nt)
  
  if (q == "zero") {
    print("no move needed")
  } else if (q == "near") {
    nt <- move_end(nt, dir)
  } else if (q == "far") {
    dcol <- abs(nh$col - nt$col)
    drow <- abs(nh$row - nt$row)
    
    if (dcol == 2 & drow == 1) {
      nt$col <- mean(nh$col + nt$col)
      nt$row <- ceiling(mean(nh$row + nt$row))
    } else {
      nt$row <- mean(nh$row + nt$row)
      nt$col <- ceiling(mean(nh$col + nt$col))
    }
  }
  
  rope$head <- nh
  rope$tail <- nt
  rope$visited <- append(rope$visited, list(c(nt$row, nt$col)))
  rope
}

for (d in dt) {
  rope <- move_rope(rope, d)
}

rope$visited |>
  unique() |>
  map(\(x) data.frame(r = x[1], c = x[2])) |>
  bind_rows() |>
  mutate(id = row_number()) |>
  ggplot() +
  geom_point(aes(x = c, y = r, size = id, color = id)) +
  ylim(c(11, 15)) +
  xlim(c(11, 16))
```

