---
title: "Welcome!"
format: html
execute: 
  enabled: true
  cache: false
  freeze: false
---

Welcome to my Advent of Code book! All of my solutions are in R with varying degrees of complexity and documentation.

::: {.callout-caution}

## Under Construction

I'm still working on getting the 2021 and earlier puzzles converted to Quarto. The star chart below is accurate, even if I don't have the solutions posted here just yet.

:::

## Star Chart

```{r}
#| output: false
#| include: false
library(tidyverse)
years <- c(2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, 2023)
stars <- c(  43,   18,   16,   12,    8,   22,   26,   28,    4)

mapply(\(y, s) {
  c("star" = rev(seq_len(s))) |>
    `names<-`(rep(y, s)) |>
    c(setNames(0, y))
}, years, stars) |>
  unlist() %>%
  data.frame("year" = names(.), "stars" = .) |>
  group_by(year) |>
    mutate(label = max(stars)) |>
    ungroup() |>
  filter(stars > 0 | dplyr::n() == 1, .by = 'year') |>
  mutate(
    label = ifelse(label == stars, label, NA),
    stars = ifelse(stars == 0, NA, stars)
  ) |>
  ggplot(aes(x = year, y = stars)) +
  ggstar::geom_star(fill = "gold", size = 5) +
  geom_label(aes(label = label), size = 3) +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.ticks = element_blank(),
    axis.text = element_text(face = "bold"),
    axis.text.y = element_blank(),
    panel.grid = element_blank(),
    panel.background = element_rect(fill = 'transparent', colour = 'transparent'),
    plot.background = element_rect(fill = 'transparent', color = NA)
  ) +
  xlab("Year") + ylab("Stars") +
  ylim(0, max(stars) + 8) +
  coord_cartesian(clip = "off") +
  geom_label(
    x = .75,
    y = -4, # year tick box
    label = paste(rep(" ", 148), collapse = ""),
    hjust = 0,
    fill = "white"
  ) +
  geom_label(x = 5, y = -6.3, label = "       ") + # year label box
  ggtext::geom_richtext(
    x = .22,
    y = max(stars) / 2 + 4,
    label = "",
    angle = 90,
    label.padding = unit(c(.6, 1.1, .4, 1.1), "lines")
  ) +
  geom_label(
    x = .5,
    y = max(stars) + 4,
    label = paste(
      "My Advent of Code Star Chart\nTotal Stars: ",
      sum(stars),
      "/",
      length(years) * 50
    ),
    hjust = 0
  ) -> p
print(p)
ggsave("stars.png", p, bg = 'transparent')
```

![](stars.png)

```{r}
#| echo: false
#| output: false
# source("post-packages.R")

cat("adventofcode.guslipkin.me", file = "docs/CNAME")
```

## My Favorite Solutions

- [2016-12](2016/12/2016-12.html) and [2017-08](2017/08/2017-08.html): I [created a small assembly style computer](https://mistlecode.guslipkin.me/reference/assembly) that solves the problems for me given a set of registers and instructions.
- [2021-09](2021/09/2021-09.html): I used the `dbscan` clustering method to solve a path finding issue. 
- [2022-04](2022/04/2022-04.html): While not my fastest part 1, part 2 took me just 38 seconds!
- [2022-11](2022/11/2022-11.html): I used [S3 Classes](https://adv-r.hadley.nz/s3.html#s3) and [function factories](https://adv-r.hadley.nz/function-factories.html?q=function%20fac#function-factories) for the first time, and got just a little bit better at recursion.
