---
 title: "24: It Hangs in the Balance"
---

```{r}
#| message: false
library(mistlecode)

dt <- 
  readLines("input.txt") |>
  as.integer()
dt <- c(1:5, 7:11)
```

## Part 1

```{r}
target_weight <- sum(dt) / 3

x <-
  1:(length(dt) / 2) |>
  map(\(x) {
    com <- combn(dt, x)
    com[,apply(com, 2, sum) == target_weight] |>
      as.data.frame() |>
      as.list()
  }, .progress = TRUE) |>
  unlist(recursive = FALSE) |>
  `names<-`(NULL) |>
  purrr::discard(\(x) length(x) == 0)

combos <-
  combn(seq_along(x), 3) |>
  as.data.frame() |>
  as.list()

x <-
  lapply(combos, \(y) {
    if (max(table(unlist(x[y]))) != 1) return(NULL)
    list(
      set = x[y],
      min_size = min(sapply(x[y], length)),
      qe = min(sapply(x[y], prod))
    )
  }) |>
  purrr::discard(is.null)

min_size <- sapply(x, \(x) x$min_size)
qe <- sapply(x, \(x) x$qe)
qe[which(min_size == min(min_size))][1]
```


These are primes. There's probably something smart you can do with it.

```{r}
l <- sum(dt[1:(length(dt) / 2)])

dt |>
  seq_along() |>
  # head(5) |>
  map(\(x) {
    com <- combn(dt, x)
    x <- apply(com, 2, sum)
    com <- com[,which(x == l)]
    if (length(com) == 0) { return(NULL) }
    com <- if (!is.vector(com)) apply(com, 2, as.vector) else matrix(t(com))
    com |>
      as.data.frame() |>
      as.list() |>
      unname() |>
      map(~ c("prod" = prod(.x), "len" = length(.x)))
  }, .progress = TRUE) |>
  discard(is.null) |>
  bind_rows() |>
  arrange(len, prod) |>
  head(1) |> 
  pull(prod)
```

