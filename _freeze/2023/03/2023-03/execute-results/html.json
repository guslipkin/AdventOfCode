{
  "hash": "9194853bea46f85213e053a2a22ba625",
  "result": {
    "markdown": "---\ntitle: \"03: Gear Ratios\"\nformat: html\n---\n\n::: {.cell hash='2023-03_cache/html/unnamed-chunk-1_2f97dea9914ee62a8a9d22baa66125c9'}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n\noptions(scipen = 999)\n```\n:::\n\n::: {.cell hash='2023-03_cache/html/unnamed-chunk-2_5310764d02c0714c82d8fed690d65f48'}\n\n```{.r .cell-code}\ndt <- \n  readLines(\"input.txt\") |>\n  stringr::str_split(\"\")\n\nm <- matrix(unlist(dt), nrow = length(dt), byrow = TRUE)\n```\n:::\n\n\n## Part 1\n\nThis was so much fun! I love `dbscan` with all my heart. I also did something really stupid and submitted the test input then had to wait the longest minute of my life to submit the real answer.\n\n\n::: {.cell hash='2023-03_cache/html/unnamed-chunk-3_fca136b7dbf35a23f6050b9250d18e04'}\n\n```{.r .cell-code}\ndt <- mistlecode::matrix_to_coords(m)\nclust <-\n  dt |>\n  dplyr::filter(data != \".\") |>\n  dplyr::select(-data) |>\n  dbscan::dbscan(sqrt(2), minPts = 2)\ndt <- \n  dt |>\n  dplyr::filter(data != \".\") |>\n  dplyr::mutate(clust = clust$cluster) |>\n  dplyr::filter(any(!grepl('[0-9]', data)), .by = 'clust')\nnumbers <-\n  mistlecode::coords_to_matrix(dt$data, dt$row, dt$col) |>\n  t() |>\n  as.vector() |>\n  paste0(collapse = \"\") |>\n  stringr::str_replace_all('[^0-9]', ' ') |>\n  stringr::str_split(' ') |>\n  unlist() |>\n  as.numeric() |>\n  purrr::discard(is.na)\nsum(numbers, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 520019\n```\n:::\n:::\n\n\n## Part 2\n\nThis is really long-winded. I'm sure it could be better functionalized. The hard part wasn't as much figuring out what goes in a group as much as figuring out what goes in which group.\n\n\n::: {.cell hash='2023-03_cache/html/unnamed-chunk-4_648f2c7cfe0ad2e83b153eb23a0531e6'}\n\n```{.r .cell-code}\ndt <- mistlecode::matrix_to_coords(m)\nnumber_clust <-\n  dt |>\n  dplyr::filter(grepl('[0-9]', data)) |>\n  dplyr::select(-data) |>\n  dbscan::dbscan(1, minPts = 1)\nnumber_dt <-\n  dt |>\n  dplyr::filter(grepl('[0-9]', data)) |>\n  dplyr::mutate(number_clust = number_clust$cluster)\nclust_dt <- \n  dt |>\n  dplyr::filter(data != \".\") |>\n  dplyr::mutate(clust = clust$cluster) |>\n  dplyr::left_join(number_dt, by = dplyr::join_by(data, row, col)) |>\n  dplyr::filter(any(!grepl('[0-9]', data)), .by = 'clust') |>\n  dplyr::mutate(\n    has_prod = any(data == '*') & length(unique(number_clust[!is.na(number_clust)])) == 2,\n    prod_group = dplyr::cur_group_id(),\n    .by = 'clust'\n  ) |>\n  dplyr::filter(grepl('[0-9]', data))\nhas_prod <-\n  mistlecode::coords_to_matrix(clust_dt$prod_group, clust_dt$row, clust_dt$col) |>\n  t() |>\n  as.vector() |>\n  data.frame() |>\n  `colnames<-`('has_prod') |>\n  dplyr::mutate(t = cumsum(is.na(has_prod))) |>\n  dplyr::filter(dplyr::row_number() == dplyr::n() & !is.na(has_prod), .by = 't') |>\n  dplyr::pull(has_prod)\n\ndata.frame(\n  has_prod,\n  numbers\n) |>\n  dplyr::filter(dplyr::n() >= 2, .by = has_prod) |>\n  dplyr::summarise(val = prod(numbers), .by = has_prod) |>\n  dplyr::pull(val) |>\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 75519888\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}