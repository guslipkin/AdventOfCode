{
  "hash": "7f046e07f2eb485dd91580b5e0295fe9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"02: Cube Conundrum\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n\noptions(scipen = 999)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndt <-\n  readLines(\"input.txt\") |>\n  stringr::str_split(\": |; \") |>\n  purrr::map(\\(x) {\n    x[-1] |>\n      str_split(', ')\n  })\n```\n:::\n\n\n\n\n## Part 1\n\nI'm pretty pleased overall. I got a bit hung up on the if statements because `y` was originally all the colors, not one color at a time so I had to add the second (actually third) `map` statement.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nred <- 12; green <- 13; blue <- 14;\n\ndt |>\n  purrr::map_lgl(\\(x) {\n    x <-\n      x |>\n      purrr::map(\\(x2) {\n        x2 |>\n          stringr::str_split(\" \") |>\n          purrr::map(\\(y) {\n            r <- 1\n            if ((y[2] == 'red' & as.numeric(y[1]) > red) |\n                (y[2] == 'green' & as.numeric(y[1]) > green) |\n                (y[2] == 'blue' & as.numeric(y[1]) > blue)) {\n              r <- 0\n            }\n            return(r)\n          })\n    }) |>\n      unlist()\n    all(x == 1)\n  }) |>\n  which() |>\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2006\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\nPretty happy with this too. I got pretty stuck on `X1` being character because I was casting later but that meant I was finding the max of a character not a numeric. Moved the cast and it works like a dream.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt |>\n  purrr::map_int(\\(x) {\n    x |>\n    purrr::map(\\(y) {\n      y |>\n        stringr::str_split_fixed(\" \", 2) |>\n        data.frame() |>\n        dplyr::arrange(X2)\n    }) |>\n      purrr::list_rbind() |>\n      dplyr::summarise(count = max(as.numeric(X1)), .by = X2) |>\n      dplyr::pull(count) |>\n      as.numeric() |>\n      prod()\n  }) |>\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 84911\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}