{
  "hash": "0f3dfee290d903c157889efd7b6a6290",
  "result": {
    "markdown": "---\ntitle: \"Day 3: Crossed Wires\"\nformat: html\n---\n\n::: {.cell hash='2019-03_cache/html/unnamed-chunk-1_65a7c1d6b5e984e82971ce167b1f4353'}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTo install `mistlecode` yourself, run `devtools::install_github('guslipkin/mistlecode')`.\n\n Also loading:  cipheR data.table dplyr pacman purrr slider stringr tidyverse\n```\n:::\n:::\n\n::: {.cell hash='2019-03_cache/html/unnamed-chunk-2_0ba06f7599d2846a0cd539a8166aac55'}\n\n```{.r .cell-code}\ndtM <-\n  readLines(\"input2.txt\") |>\n  lapply(\\(x) {\n    strsplit(x, \",\")[[1]] |>\n      data.frame() |>\n      `colnames<-`(c(\"col\")) |>\n      separate(col = \"col\", into = c(\"dir\", \"mag\"), sep = 1) |>\n      mutate(mag = as.integer(mag))\n  })\n```\n:::\n\n\n## Part 1\n\n\n::: {.cell hash='2019-03_cache/html/unnamed-chunk-3_64ba1e0e5ee010508faba20ad3001112'}\n\n```{.r .cell-code}\ndt <- rbind(\n  dtM[[1]] |> mutate(wire = 1),\n  dtM[[2]] |> mutate(wire = 2)\n  )\n```\n:::\n\n::: {.cell hash='2019-03_cache/html/unnamed-chunk-4_732b416d78fee1886c1c446e8838df91'}\n\n```{.r .cell-code}\nmat <-\n  matrix(0, max(dtM[[1]]$mag, dtM[[2]]$mag) * 2 + 1, max(dtM[[1]]$mag, dtM[[2]]$mag) * 2 + 1)\n\ncurR <- (nrow(mat) - 1) / 2\ncurC <- (ncol(mat) - 1) / 2\n\napply(dt, 1, \\(x) {\n  dir <- x[\"dir\"]\n  mag <- as.numeric(x[\"mag\"])\n  y <- as.numeric(x[\"wire\"])\n  if (dir == \"R\") {\n    mat[curR:(curR - mag), curC] <<- y\n    curR <- curR + mag\n  } else if (dir == \"L\") {\n    mat[(curR - mag):curR, curC] <<- y\n    curR <- curR - mag\n  } else if (dir == \"U\") {\n    mat[curR, curC:(curC + mag)] <<- y\n    curC <- curC + mag\n  } else if (dir == \"U\") {\n    mat[curR, (curC - mag):curC] <<- y\n    curC <- curC - mag\n  }\n  \n  data.frame(which(mat == y, arr.ind = TRUE), \"wire\" = y)\n}) %>%\n  do.call(rbind, .) |>\n  mutate(wire = as.character(wire)) |>\n  group_by(row, col) |>\n    summarise(wire = str_c(unique(wire), collapse = \" \")) |>\n    ungroup() |>\n  filter(wire == \"1 2\") |>\n  mutate(dist = abs(row - curR) + abs(col - curC)) |>\n  arrange(dist)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'row'. You can override using the `.groups`\nargument.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 Ã— 4\n     row   col wire   dist\n   <int> <int> <chr> <dbl>\n 1     8     8 1 2       0\n 2     7     8 1 2       1\n 3     8     9 1 2       1\n 4     6     8 1 2       2\n 5     8    10 1 2       2\n 6     5     8 1 2       3\n 7     8    11 1 2       3\n 8     4     8 1 2       4\n 9     8    12 1 2       4\n10     3     8 1 2       5\n11     8    13 1 2       5\n12     2     8 1 2       6\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}