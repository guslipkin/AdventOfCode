{
  "hash": "3a5dbec900bd519821bf19e4d28a9773",
  "result": {
    "markdown": "---\ntitle: \"Day 3: Crossed Wires\"\nformat: html\n---\n\n::: {.cell hash='2019-03_cache/html/unnamed-chunk-1_65a7c1d6b5e984e82971ce167b1f4353'}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTo install `mistlecode` yourself, run `devtools::install_github('guslipkin/mistlecode')`.\n\n Also loading:  cipheR data.table dplyr pacman purrr slider stringr tidyverse\n```\n:::\n:::\n\n::: {.cell hash='2019-03_cache/html/unnamed-chunk-2_0ba06f7599d2846a0cd539a8166aac55'}\n\n```{.r .cell-code}\ndtM <-\n  readLines(\"input2.txt\") |>\n  lapply(\\(x) {\n    strsplit(x, \",\")[[1]] |>\n      data.frame() |>\n      `colnames<-`(c(\"col\")) |>\n      separate(col = \"col\", into = c(\"dir\", \"mag\"), sep = 1) |>\n      mutate(mag = as.integer(mag))\n  })\n```\n:::\n\n\n## Part 1\n\n\n::: {.cell hash='2019-03_cache/html/unnamed-chunk-3_6fb13d4f10bca8e00b2f4f49d301ef21'}\n\n```{.r .cell-code}\nmat <-\n  matrix(0, max(dtM[[1]]$mag, dtM[[2]]$mag) * 2 + 1, max(dtM[[1]]$mag, dtM[[2]]$mag) * 2 + 1)\nlapply(1:2, \\(y) {\n  curR <<- (nrow(mat) - 1) / 2\n  curC <<- (ncol(mat) - 1) / 2\n\n  dt <- dtM[[y]]\n  dt$wire <- y\n  \n  apply(dt, 1, \\(x) {\n    dir <- x[\"dir\"]\n    mag <- as.numeric(x[\"mag\"])\n    wire <- as.numeric(x[\"wire\"])\n    if (dir == \"R\") {\n      mat[curR:(curR + mag), curC] <<-\n        ifelse(!all(mat[curR:(curR + mag), curC] %in% c(0, wire)), wire, 3)\n      curR <<- curR + mag\n    } else if (dir == \"L\") {\n      mat[(curR - mag):curR, curC] <<-\n        ifelse(!all(mat[curR:(curR - mag), curC] %in% c(0, wire)), wire, 3)\n      curR <<- curR - mag\n    } else if (dir == \"U\") {\n      mat[curR, curC:(curC + mag)] <<-\n        ifelse(!all(mat[curR, curC:(curC + mag)] %in% c(0, wire)), wire, 3)\n      curC <<- curC + mag\n    } else if (dir == \"U\") {\n      mat[curR, (curC - mag):curC] <<-\n        ifelse(!all(mat[curR, curC:(curC - mag)] %in% c(0, wire)), wire, 3)\n      curC <<- curC - mag\n    }\n    invisible()\n  })\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[1]]\nNULL\n\n[[2]]\nNULL\n```\n:::\n\n```{.r .cell-code}\nunique(as.vector(mat))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0 2 3 1\n```\n:::\n\n```{.r .cell-code}\nwhich(mat == 3, arr.ind = TRUE) |>\n  data.frame() |>\n  mutate(\"rDist\" = abs(row - (nrow(mat) - 1) / 2),\n         \"cDist\" = abs(col - (ncol(mat) - 1) / 2),\n         \"dist\" = rDist + cDist) |>\n  arrange(dist)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   row col rDist cDist dist\n1    9   8     1     0    1\n2   10   8     2     0    2\n3   11   8     3     0    3\n4   12   8     4     0    4\n5   13   8     5     0    5\n6   14   8     6     0    6\n7   15   8     7     0    7\n8    8  15     0     7    7\n9   11  13     3     5    8\n10   9  15     1     7    8\n11  12  13     4     5    9\n12  13  13     5     5   10\n13  14  13     6     5   11\n14  15  13     7     5   12\n15  16  13     8     5   13\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}