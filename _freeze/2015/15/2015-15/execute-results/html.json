{
  "hash": "1c886cace01a39163e1c15e400a4212c",
  "result": {
    "markdown": "---\ntitle: \"15: Science for Hungry People\"\n---\n\n::: {.cell hash='2015-15_cache/html/unnamed-chunk-1_14710e466922b985683ac12ab04a733b'}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTo install `mistlecode` yourself, run `devtools::install_github('guslipkin/mistlecode')`.\n\n Also loading:  cipheR data.table dplyr purrr slider stringr tidyverse glue\n```\n:::\n\n```{.r .cell-code}\nlibrary(rlang)\nlibrary(furrr)\nlibrary(progressr)\ndt <-\n  fread(\"input.txt\", sep = \" \") |>\n  select(seq(1, 11, by = 2)) |>\n  `colnames<-`(\n    c(\"candy\", \"capacity\", \"durability\", \"flavor\", \"texture\", \"calories\")\n  ) |>\n  mutate(\n    across(everything(), ~ str_remove_all(.x, \"[,:]\")),\n    across(-candy, as.integer)\n  )\n```\n:::\n\n\n## Part 1\n\nThis is super dumb but I don't feel like learning how to use one of the linear programming tools. I'll probably regret it.\n\n\n::: {.cell hash='2015-15_cache/html/unnamed-chunk-2_7345e25e9e3bf0d0ece9f471cace57d0'}\n\n```{.r .cell-code}\ncost <-\n  dt |>\n  nrow() |>\n  seq_len() |>\n  map(\\(x) {\n    dt[x, ] |>\n      mutate(count = 101) |>\n      uncount(count, .id = \"id\") |>\n      mutate(id = id - 1)\n  }) |>\n  bind_rows()\n\ncombos <-\n  expand.grid(list(1:100)[rep(1,nrow(dt))]) |>\n  `colnames<-`(dt$candy) |>\n  filter(rowSums(across(everything())) == 100)\n\nfilter_cookies <- function(...) {\n  p()\n  list2(...) |>\n    imap(\\(.x, idx) {\n      filter(cost, id == .x & candy == idx)\n    }) |>\n    bind_rows() |>\n    mutate(across(capacity:calories, ~ .x * id)) |>\n    select(capacity:texture) |>\n    map_int(sum) |>\n    data.frame() |>\n    `colnames<-`(\"value\") |>\n    mutate(value = ifelse(value < 0, 0, value)) |>\n    pull(value) |>\n    prod()\n}\n\nplan(multisession, workers = availableCores())\nwith_progress({\n  p <- progressor(steps = nrow(combos))\n  combos |>\n    future_pmap_int(filter_cookies) |>\n    max()\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 13882464\n```\n:::\n\n```{.r .cell-code}\nplan(sequential)\n```\n:::\n\n\n## Part 2\n\nRemember how I said I'd probably regret it? It could've been worse.\n\n\n::: {.cell hash='2015-15_cache/html/unnamed-chunk-3_13d94c01d7bc1a0e662e7d7c05d33517'}\n\n```{.r .cell-code}\ncheck_calories <- function(cal) {\n  if (cal$value[rownames(cal) == \"calories\"] == 500) {\n    return(data.frame(value = cal[rownames(cal) != \"calories\",]))\n  } else {\n    return(data.frame(value = 0))\n  }\n}\n\nfilter_cookies <- function(...) {\n  p()\n  list2(...) |>\n    imap(\\(.x, idx) {\n      filter(cost, id == .x & candy == idx)\n    }) |>\n    bind_rows() |>\n    mutate(across(capacity:calories, ~ .x * id)) |>\n    select(capacity:calories) |>\n    map_int(sum) |>\n    data.frame() |>\n    `colnames<-`(\"value\") |>\n    check_calories() |>\n    mutate(value = ifelse(value < 0, 0, value)) |>\n    pull(value) |>\n    prod()\n}\n\nplan(multisession, workers = availableCores())\nwith_progress({\n  p <- progressor(steps = nrow(combos))\n  combos |>\n    future_pmap_int(filter_cookies) |>\n    max()\n})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11171160\n```\n:::\n\n```{.r .cell-code}\nplan(sequential)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}