{
  "hash": "deb313ec7307c6ad60983ce0da205bb0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"12: JSAbacusFramework.io\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mistlecode)\nlibrary(jsonlite)\ndt <- readLines(\"input.json\")\n```\n:::\n\n\n\n\n## Part 1\n\nSurprisingly easy. Just had a small regex typo with `?` instead of `+`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt |>\n  str_extract_all(\"(-?[0-9]+)\") |>\n  unlist() |>\n  as.numeric() |>\n  sum(na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 191164\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\nWhat a nightmare! I got the answer wrong 16 times and tried so many things. String replacement, string reduction, listing, unlisting, whatever I could think of. I eventually remembered rrapply and had a wacky solution that didn't work at all. I took a break for a few days and really read the documentation on `how = \"recurse\"`. Then it was just a matter of realizing that `.xname` in the documentation is not the same as `names(x)` and I was good to go!\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt |>\n  parse_json() |>\n  list() |>\n  rrapply::rrapply(\n    \\(o) { any(o == \"red\") & any(names(o) %in% letters) },\n    \\(x) { return(list(\"a\" = \"red\")) }, \n    how = \"recurse\",\n    classes = \"list\") |>\n  unlist() |>\n  as.numeric() |>\n  suppressWarnings() |>\n  sum(na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 87842\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}