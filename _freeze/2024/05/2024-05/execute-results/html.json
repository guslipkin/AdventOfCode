{
  "hash": "cd840aff0c6a409af906c74e2bd71ca5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"05: Print Queue\"\nformat: html\n---\n\n\n\n\n\nLots of minor hiccups leading to a major fizzle. Overall I want to see how everyone else's solutions look, but I think mine is rather elegant, even if a bit slow.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n\noptions(scipen = 999)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ninput <- 'input.txt'\nskip <- which(readLines(input) == '')\n\ndt1 <- \n  input |>\n  readr::read_delim('|', col_names = FALSE, n_max = skip - 1, show_col_types = FALSE) |>\n  dplyr::filter(!is.na(.data$X2))\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRegistered S3 methods overwritten by 'bit64':\n  method               from  \n  as.double.integer64  cheapr\n  as.integer.integer64 cheapr\n```\n\n\n:::\n\n```{.r .cell-code}\ndt2 <-\n  input |>\n  readLines()\ndt2 <-\n  dt2[(skip+1):length(dt2)] |>\n  strsplit(',') |>\n  purrr::map(as.integer)\n```\n:::\n\n\n\n\n\n## Part 1\n\nThis was really frustrating. I was struggling and eventually found I had lines with even numbers of items. I couldn't figure out what the heck was up with that and how to get a middle item from an even length set and then eventually realized my input ingestion was messing everything up. Once I switched from `read.delim()` to `readLines()`, I was able to clear everything right up.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmiddle_page <-\n  dt2 |>\n  purrr::map_int(\\(x) {\n    if (length(x) %% 2 == 0) print(x)\n    is_valid <-\n      x |>\n      seq_along() |>\n      purrr::map_lgl(\\(i) {\n        if (i == length(x)) return(TRUE)\n        left <- x[i]; right <- x[(i+1):length(x)];\n        check_right <- dt1$X2[dt1$X1 == left]\n        all(right %in% check_right)\n      }) |>\n      all()\n    if (is_valid) x[ceiling(length(x) / 2)] else 0\n  })\nsum(middle_page)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 7307\n```\n\n\n:::\n:::\n\n\n\n\n\n## Part 2\n\nThis was just a matter of getting the logic straight in my head then putting it on sreen and getting over silly mistakes like filtering for things that passed the test in part 1 instead of things that failed. Except. I've always struggled with recursion but I'm getting better at it and I'm getting better at it and I'm getting better at it and eventually I might be able to solve [that stupid bag problem from 2020](https://adventofcode.com/2020/day/7).\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nswap <- function(x, i = 1) {\n  left <- x[i]; right <- x[i+1];\n  check_right <- dt1$X2[dt1$X1 == left]\n  if (is.na(right)) return(x)\n  if (!(right %in% check_right)) {\n    x[i+1] <- left; x[i] <- right;\n    swap(x, 1)\n  } else { swap(x, i + 1) }\n}\n\ndt2[middle_page == 0] |>\n  purrr::map_int(\\(x) {\n    x <- swap(x)\n    x[ceiling(length(x) / 2)]\n  }) |>\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 4713\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}