{
  "hash": "1434e095ce6a2359d92a139c67c61574",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"07: Bridge Repair\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n\noptions(scipen = 999)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmat <-\n  'input.txt' |>\n  readLines() |>\n  stringr::str_split(':| ', simplify = TRUE) |>\n  mistlecode::cast_matrix(as.numeric)\nmat <- mat[,-2]\n```\n:::\n\n\n\n\n## Part 1\n\nOkay. At first glance this is some fancy math one that I don't know enough math to do correctly. After fiddling around a bit and getting it working on the test input, it was time to move to the real one. For ages I kept getting the same wrong output. I thought that maybe it's because I needed `{bit64}` for 64 bit integers and spent way too long screwing around with that then eventually realized that not only was my input not being read properly (that seems to be a theme this year...), but that the numbers can be `double` and that solves all my problems. They're still whole numbers, just not integers. After realizing that, it was a lot of head scratching until I realized that my `if` statement with `return(total)` was inside my second `for` loop when it should be after it. Fixing that led to a victory.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotals <-\n  mat |>\n  apply(1, \\(r) {\n    target <- r[1]; r <- r[-1]; r <- r[!is.na(r)];\n    grid <- expand.grid(rlang::inject(rep(list(c('*', '+')), length(r) - 1)))\n    for (g in seq_len(nrow(grid))) {\n      ops <- grid[g,] |> unlist() |> unname(); total <- 0;\n      for (i in seq_along(r)[-1]) {\n        if (i == 2) {\n          total <- if (ops[i-1] == '+') r[i-1] + r[i] else r[i-1] * r[i]\n        } else {\n          total <- if (ops[i-1] == '+') total + r[i] else total * r[i]\n        }\n      }\n      if (target == total) return(total)\n    }\n    return(0)\n  }) \npart1 <-\n  totals |> \n  sum() |>\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 945512582195\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\nI spent a while on part 2 as well, but had more of a plan than part 1. I initially had a cool little recursion method that used the same `expand.grid` and collapsed the string in on itself. It ultimately didn't end up working and I'm not really sure why. Moving the operations into a function helped make things more readable and then it was just a matter of collapsing the string the right way every time and waiting a while for everything to run. After getting my answer I realized I could reduce `grid` even further by filtering for rows that contain a `concatenate` operation since the new numbers must have one.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntictoc::tic()\nfuture::plan(future::multisession, workers = future::availableCores())\nprogressr::with_progress({\n  do_op <- function(x, y, op) {\n    x <- \n      if (op == '*') x * y else if (op == '+') x + y else paste0(x, y, collapse = '')\n    as.numeric(x)\n  }\n  \n  mat2 <- mat[totals == 0,] \n  p <- progressr::progressor(steps = nrow(mat2))\n  mat2 |>\n    nrow() |>\n    seq_len() |>\n    furrr::future_map_dbl(\\(rr) {\n      p()\n      rr <- mat2[rr,]\n      target <- rr[1]; rr <- rr[-1]; rr <- rr[!is.na(rr)];\n      grid <- \n        expand.grid(rlang::inject(rep(list(c('*', '+', '|')), length(rr) - 1))) |>\n        dplyr::mutate(dplyr::across(tidyselect::everything(), as.character)) |>\n        dplyr::filter(dplyr::if_any(tidyselect::everything(), \\(x) x == '|'))\n      for (g in seq_len(nrow(grid))) {\n        ops <- grid[g,] |> unlist() |> as.character()\n        r <- rr; i <- 1;\n        repeat {\n          if (r[1] > target || i > length(ops)) break\n          x <- do_op(r[1], r[2], ops[i])\n          r <- c(x, utils::tail(r, -2))\n          i <- i + 1\n        }\n        if (isTRUE(r == target)) return(r)\n      }\n      return(0)\n    }) |>\n    sum(part1)\n}, handlers = progressr::handler_cli())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 271691107779347\n```\n\n\n:::\n\n```{.r .cell-code}\nfuture::plan(future::sequential())\ntictoc::toc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n229.06 sec elapsed\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}