{
  "hash": "7da0ee53d89323d01ca63e233cea6a41",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"13: Claw Contraption\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n\noptions(scipen = 999)\n```\n:::\n\n\n\n\n\nFiguring out how best to parse the input was annoying. I need to remember that `tidyr::extract()` exists.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n.get_buttons <- function(x) {\n  x <-\n    stringr::str_match(x$raw, '(\\\\d+), Y[+=](\\\\d+)')[,-1] |>\n    mistlecode::cast_matrix(as.integer)\n  if (all(is.na(x[1,]))) x[-1,] else x\n}\ndt <-\n  'input.txt' |>\n  readLines() |>\n  tibble::tibble() |>\n  setNames('raw') |>\n  dplyr::mutate(\n    'game' = cumsum(.data$raw == '')\n  ) |>\n  tidyr::nest('data' = raw) |>\n  dplyr::pull(.data$data) |>\n  purrr::map(\\(x) {\n    x <- .get_buttons(x)\n    list('a' = x[1,], 'b' = x[2,], 'p' = x[3,])\n  })\n```\n:::\n\n\n\n\n\n## Part 1\n\nI got to do math!!! I'm so proud of myself for this one. Like genuinely actually for realizing I could just math it out. And my solution is so fast too! I probably could've done the linear programming, but just solving seemed easier?\n\n\\begin{gather*}\nix_a + jx_b = X, iy_a + jy_b = Y\\\\\nix_a = X - jx_b, iy_a = Y - jy_b\\\\\ni = \\frac{X - jx_b}{x_a}, i = \\frac{Y - jy_b}{y_a}\\\\\n\\frac{X - jx_b}{x_a} = \\frac{Y - jy_b}{y_a}\\\\\nX - jx_b =\\frac{x_aY - jx_ay_b}{y_a}\\\\\ny_aX - jx_by_a = x_aY - jx_ay_b\\\\\n-jx_by_a + jx_ay_b = x_aY - y_aX\\\\\nj * (-x_by_a + x_ay_b) = x_aY - y_aX\\\\\nj = \\frac{x_aY - y_aX}{x_ay_b - x_by_a}\n\\end{gather*}\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt |>\n  purrr::map(\\(x) {\n    j <-\n      ((x$a[1] * x$p[2]) - (x$a[2] * x$p[1])) / \n      ((x$a[1] * x$b[2]) - (x$b[1] * x$a[2]))\n    i <- (x$p[1] - (j * x$b[1])) / x$a[1]\n    x <- c(i * 3, j * 1)\n    if (all(as.integer(x) == x)) sum(x)\n  }) |>\n  purrr::discard(is.null) |>\n  unlist() |> \n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 33921\n```\n\n\n:::\n:::\n\n\n\n\n\n## Part 2\n\nThis was supremely unsatisfying. I kept multiplying by 10000000000000 instead of adding then for whatever reason if I leave my if statement as an `all(x)` kinda deal, it doesn't work right. I spent way too long on random `{bit64}` stuff and trying to solve to get rid of the 10000000000000.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt |>\n  purrr::map(\\(x) {\n    x$p <- x$p + 10000000000000\n    j <-\n      ((x$a[1] * x$p[2]) - (x$a[2] * x$p[1])) / \n      ((x$a[1] * x$b[2]) - (x$b[1] * x$a[2]))\n    if (j < 0 || j %% 1 != 0) return(NULL)\n    i <- (x$p[1] - (j * x$b[1])) / x$a[1]\n    if (i < 0 || i %% 1 != 0) return(NULL)\n    x <- c(i * 3, j * 1)\n    sum(x)\n  }) |>\n  purrr::discard(is.null) |>\n  unlist() |> \n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 82261957837868\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}