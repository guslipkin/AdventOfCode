{
  "hash": "287bb5caf3e5c6512a10bd46b5609aa8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"02: Red-Nosed Reports\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n\noptions(scipen = 999)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndt <-\n  'input.txt' |>\n  readLines() |>\n  strsplit(' ') |>\n  purrr::map(as.integer)\n```\n:::\n\n\n\n\n\n## Part 1\n\nI missed the second condition for a pass at first. Mildly annoying, but not too bad globally.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt |>\n  purrr::map_lgl(\\(x) {\n    x <- x - lag(x)\n    x <- x[!is.na(x)]\n    all(abs(x) %in% 1:3) & (all(x < 0) | all(x > 0))\n  }) |> \n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 686\n```\n\n\n:::\n:::\n\n\n\n\n\n## Part 2\n\nI'm really pleased with this. I was trying something more functional, then realized a simple `for` loop was the way to go and that resulted in a 495 on the leaderboard. It's also a good example for whatever it's called that I did with my returns not just being if statements the whole way down.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest <- function(x) {\n  x <- x - lag(x)\n  x <- x[!is.na(x)]\n  all(abs(x) %in% 1:3) & (all(x < 0) | all(x > 0))\n}\n\ndt |>\n  purrr::map_lgl(\\(x) {\n    if (test(x)) return(TRUE)\n    for(i in seq_along(x)) {\n      if (test(x[-i])) return(TRUE)\n    }\n    return(FALSE)\n  }) |> \n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 717\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}