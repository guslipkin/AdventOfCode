{
  "hash": "a54ebbb9575d2b5dce66bab029f78d90",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2022-04: Camp Cleanup\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(data.table)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndt <- fread(\"input.txt\", header = FALSE)\n# dt <- readLines(\"input.txt\")\n```\n:::\n\n\n\n\nThis looks bad at first, but it's not.\n\n## Part 1\n\nIt took me a minute to figure out how I wanted to work with the data ranges. I started with `mutate` then `lapply` then quickly switched to `mapply`. From there it wrote itself. I then second-guessed my answer and divided by two because I thought I was double reporting the ranges. I cost myself a minute :(\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapply(\\(x, y) {\n  x <- as.numeric(unlist(strsplit(x, \"-\")))\n  y <- as.numeric(unlist(strsplit(y, \"-\")))\n  \n  all(x[1]:x[2] %in% y[1]:y[2]) | all(y[1]:y[2] %in% x[1]:x[2])\n}, dt$V1, dt$V2) |>\n  unlist() |>\n  table() %>%\n  .[\"TRUE\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTRUE \n 532 \n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\n38 seconds for part 2! I just had to change `all` to `any`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmapply(\\(x, y) {\n  x <- as.numeric(unlist(strsplit(x, \"-\")))\n  y <- as.numeric(unlist(strsplit(y, \"-\")))\n  \n  any(x[1]:x[2] %in% y[1]:y[2]) | any(y[1]:y[2] %in% x[1]:x[2])\n}, dt$V1, dt$V2) |>\n  unlist() |>\n  table() %>%\n  .[\"TRUE\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTRUE \n 854 \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}