{
  "hash": "931e7ffc058b7dc91e41a35cb7ee09cf",
  "result": {
    "markdown": "---\nttile: \"2022-04: Camp Cleanup\"\nformat: html\n---\n\n::: {.cell hash='2022-04_cache/html/unnamed-chunk-1_dcfcac463a7b556315ef5d80e6811929'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(data.table)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'data.table'\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\nThe following object is masked from 'package:purrr':\n\n    transpose\n```\n:::\n:::\n\n::: {.cell hash='2022-04_cache/html/unnamed-chunk-2_1e19cf48b1647a86201dc5109581a84d'}\n\n```{.r .cell-code}\ndt <- fread(\"input.txt\", header = FALSE)\n# dt <- readLines(\"input.txt\")\n```\n:::\n\n\nThis looks bad at first, but it's not.\n\n## Part 1\n\nIt took me a minute to figure out how I wanted to work with the data ranges. I started with `mutate` then `lapply` then quickly switched to `mapply`. From there it wrote itself. I then second-guessed my answer and divided by two because I thought I was double reporting the ranges. I cost myself a minute :(\n\n\n::: {.cell hash='2022-04_cache/html/unnamed-chunk-3_62a8d5a390fae0e2acb8311b307541a9'}\n\n```{.r .cell-code}\nmapply(\\(x, y) {\n  x <- as.numeric(unlist(strsplit(x, \"-\")))\n  y <- as.numeric(unlist(strsplit(y, \"-\")))\n  \n  all(x[1]:x[2] %in% y[1]:y[2]) | all(y[1]:y[2] %in% x[1]:x[2])\n}, dt$V1, dt$V2) |>\n  unlist() |>\n  table() %>%\n  .[\"TRUE\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTRUE \n 532 \n```\n:::\n:::\n\n\n## Part 2\n\n38 seconds for part 2! I just had to change `all` to `any`.\n\n\n::: {.cell hash='2022-04_cache/html/unnamed-chunk-4_02d6730fa05535939698161fcb6fdef1'}\n\n```{.r .cell-code}\nmapply(\\(x, y) {\n  x <- as.numeric(unlist(strsplit(x, \"-\")))\n  y <- as.numeric(unlist(strsplit(y, \"-\")))\n  \n  any(x[1]:x[2] %in% y[1]:y[2]) | any(y[1]:y[2] %in% x[1]:x[2])\n}, dt$V1, dt$V2) |>\n  unlist() |>\n  table() %>%\n  .[\"TRUE\"]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTRUE \n 854 \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}