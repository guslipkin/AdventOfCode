{
  "hash": "5969f4819b0241a52a86f02972221bc4",
  "result": {
    "markdown": "---\ntitle: \"2022-06: Tuning Trouble\"\nformat: html\n---\n\n::: {.cell hash='2022-06_cache/html/unnamed-chunk-1_94dab4d66d1e23645ce5a829640ca5a9'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(data.table)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'data.table'\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\nThe following object is masked from 'package:purrr':\n\n    transpose\n```\n:::\n\n```{.r .cell-code}\nlibrary(mistlecode)\n```\n:::\n\n::: {.cell hash='2022-06_cache/html/unnamed-chunk-2_c7f4c5efb0b0426fbd5821a7b808b732'}\n\n```{.r .cell-code}\ndt <- unlist(strsplit(readLines(\"input.txt\"), \"\"))\n```\n:::\n\n\nThis looks easy. Oh wait. I totally misread the problem...\n\n\n::: {.cell hash='2022-06_cache/html/unnamed-chunk-3_5ebf28f6acd3302048b404f79ea89e3e'}\n\n```{.r .cell-code}\ndo_part <- function(part) {\n  part <- part - 1\n  get_vec <- function(vec, place) {\n    if (place == 0) { return(vec)}\n    c(vec[-1:(-place)], rep(NA, place))\n  }\n  \n  lapply(0:part, function(x) {\n    get_vec(dt, x)\n  }) |>\n    data.frame() |>\n    `colnames<-`(paste0(\"X\", 1:part)) %>%\n    apply(1, function(x) {\n      paste0(x, collapse = \"\")\n    }) |>\n    sapply(function(x) {\n      max(table(strsplit(x, \"\")))\n    }) -> tmp\n  (which(tmp == 1) + part)[1]\n}\n```\n:::\n\n\n\n## Part 1\n\nHardcoding everything will bite me in the butt later probably. Ultimately not too bad in hindsight.\n\n::: {.panel-tabset}\n\n### New\n\n\n::: {.cell hash='2022-06_cache/html/unnamed-chunk-4_b8bf811deb610c432c9611ab352766a7'}\n\n```{.r .cell-code}\ndo_part(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nbdjq \n1578 \n```\n:::\n:::\n\n\n### Original\n\n\n::: {.cell hash='2022-06_cache/html/unnamed-chunk-5_eb9e4d63a34666022e4a2ed8c1767ea6'}\n\n```{.r .cell-code}\ndata.frame(\"w\" = dt,\n           \"x\" = c(dt[-1], NA),\n           \"y\" = c(dt[-1:-2], NA, NA),\n           \"z\" = c(dt[-1:-3], NA, NA, NA)) |>\n  mutate(marker = paste0(w, x, y, z, sep = \"\")) |>\n  apply(1, function(x) {\n    max(table(strsplit(x[\"marker\"], \"\")))\n  }) -> tmp\n(which(tmp == 1) + 3)[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1578\n```\n:::\n:::\n\n\n:::\n\n## Part 2\n\nWell, well, well. Hardcoding is never a good move. Took a bit of time to get it figured out, but I got there in the end.\n\n::: {.panel-tabset}\n\n### New\n\n::: {.cell hash='2022-06_cache/html/unnamed-chunk-6_947398886a941e25f4901c356fd0ce6e'}\n\n```{.r .cell-code}\ndo_part(14)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmdcbnwqgshpvfj \n          2178 \n```\n:::\n:::\n\n\n### Original\n\n\n::: {.cell hash='2022-06_cache/html/unnamed-chunk-7_1ebb0ff8ebca5ba7293c1a3b3975fd85'}\n\n```{.r .cell-code}\nget_vec <- function(vec, place) {\n  if (place == 0) { return(vec) }\n  c(vec[-1:(-place)], rep(NA, place))\n}\n\nlapply(0:13, function(x) {\n  get_vec(dt, x)\n}) |>\n  data.frame() |>\n  `colnames<-`(paste0(\"X\", 1:14)) %>%\n  apply(1, function(x) {\n    paste0(x, collapse = \"\")\n  }) |>\n  sapply(function(x) {\n    max(table(strsplit(x, \"\")))\n  }) -> tmp\n(which(tmp == 1) + 13)[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nmdcbnwqgshpvfj \n          2178 \n```\n:::\n:::\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}