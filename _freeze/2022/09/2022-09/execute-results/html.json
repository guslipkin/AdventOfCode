{
  "hash": "253531e94eeb97ed4a5acd2508b6992d",
  "result": {
    "markdown": "---\ntitle: \"2022-09: Rope Bridge\"\nformat: html\n---\n\n::: {.cell hash='2022-09_cache/html/unnamed-chunk-1_bc6cb8919cba223dbf8bad29250d602d'}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTo install `mistlecode` yourself, run `devtools::install_github('guslipkin/mistlecode')`.\n\n Also loading:  cipheR data.table dplyr purrr slider stringr tidyverse\n```\n:::\n:::\n\n::: {.cell hash='2022-09_cache/html/unnamed-chunk-2_8ea9c4749ab537f6723a0349a72bf236'}\n\n```{.r .cell-code}\ndt <- \n  fread(\"input2.txt\", header = FALSE) |>\n  `colnames<-`(c(\"dir\", \"mag\"))\ndt <-\n  dt %>%\n  .[rep(seq_len(dim(dt)[1]), dt$mag)] %>%\n  mutate(mag = 1)\n# dt <- \n#   readLines(\"input.txt\") |>\n#   str_split(\"\", simplify = TRUE) |>\n#   unlist(recursive = FALSE) |>\n#   data.frame()\n```\n:::\n\n\n# Part 1\n\n\n::: {.cell hash='2022-09_cache/html/unnamed-chunk-3_084d15889e23fd444b20dd535b7325ff'}\n\n```{.r .cell-code}\ndt <- \n  dt |>\n  mutate(step = rleid(dir)) |> \n  follow_directions(0, 0, preserve_data = TRUE) |>\n  mutate(row = row * -1)\n\nm <- coords_to_matrix(dt$step, dt$row, dt$col)\n\nrope <- c(\"row\" = 0, \"col\" = 0)\n\n# for(i in 1:nrow(dt)) {\n#   get_adjacent_values(rope[\"col\"], rope[\"row\"], )\n# }\n```\n:::\n\n::: {.cell hash='2022-09_cache/html/unnamed-chunk-4_a287d604f6dfcfb6b1bbc9860b9a9e4c'}\n\n```{.r .cell-code}\nsize <- 13\n#   dt |>\n#   group_by(dir) |>\n#   summarise(mag = sum(mag)) |>\n#   pull(mag) |>\n#   max()\n# size <- 3144\nhM <- matrix(NA, size, size)\ntM <- hM\n\nsize <- ceiling(size / 2)\nhR <- size; hC <- size; tR <- size; tC <- size\n\nmove_h <- function(dir, mag, row, col) {\n  if (dir == \"R\") { return(list(\"row\" = row, \"col\" = col + mag)) }\n  if (dir == \"L\") { return(list(\"row\" = row, \"col\" = col - mag)) }\n  if (dir == \"U\") { return(list(\"row\" = row - mag, \"col\" = col)) }\n  if (dir == \"D\") { return(list(\"row\" = row + mag, \"col\" = col)) }\n}\n\nmove_t <- function(hR, hC, row, col) {\n  return(list(\"row\" = hR, \"col\" = hC))\n}\n\nhM[hR,hC] <- 1\n\nhR1 <- hR; hC1 <- hC\nm <- move_h(dt$dir[1], dt$mag[1], hR, hC)\nhR <- m$row; hC <- m$col\n\nm <- move_t(hR, hC, tR, tC)\ntR <- m$row; tC <- m$col\n\nhR1 <- hR; hC1 <- hC\nm <- move_h(dt$dir[2], dt$mag[2], hR, hC)\nhR <- m$row; hC <- m$col\n\nplane <- c(\"R\" = \"c\", \"L\" = \"c\", \"U\" = \"r\", \"D\" = \"r\")\n\nget_h_plane <- function(hR, hC, hR1, hC1) {\n  if (hR == hR1 & hC != hC1) { return(\"r\") }\n  else if (hR != hR1 & hC == hC1) { return(\"c\") }\n}\n\nget_t_plane <- function(hR, hC, tR, tC) {\n  if (tR == hR & tC != hC) { return(\"r\") }\n  else if (tR != hR1& tC == hC) { return(\"c\") }\n  else { return(\"rc\") }\n}\n\nstops <- data.frame(\"row\" = c(), \"col\" = c())\n\nsapply(3:8, \\(i) {\n  hM[hR,hC] <<- i\n  tM[tR,tC] <<- i\n\n  m <- NULL\n  \n  # if directly diagonal\n  rChange <- abs(tR - hR); cChange <- abs(tC - hC)\n  if (get_t_plane(hR, hC, tR, tC) == \"rc\") {\n    \n  } else {\n    m <- move_t(hR, hC, tR, tC)\n  }\n  if (!is.null(m)) {\n    tR <<- m$row; tC <<- m$col\n    stops <<- rbind(stops, data.frame(\"row\" = tR, \"col\" = tC))\n  }\n  \n  # print(i)\n  # print(get_t_plane(hR, hC, tR, tC) == \"rc\" & sqrt((tR-hR)^2 + (tC-hC)^2) == 1)\n  \n  hR1 <<- hR; hC1 <<- hC\n  m <- move_h(dt$dir[i], dt$mag[i], hR, hC)\n  hR <<- m$row; hC <<- m$col\n  return(1)\n}) |> invisible()\n\nprint(tM[1:7,-1:-6])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]   NA   NA   NA   NA   NA   NA   NA\n[2,]   NA   NA   NA   NA   NA   NA   NA\n[3,]   NA   NA   NA   NA   NA   NA   NA\n[4,]   NA   NA   NA   NA   NA   NA   NA\n[5,]   NA   NA   NA   NA    8   NA   NA\n[6,]   NA   NA   NA   NA   NA   NA   NA\n[7,]   NA    3    4    5    7   NA   NA\n```\n:::\n\n```{.r .cell-code}\nprint(hM[1:7,-1:-6])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]   NA   NA   NA   NA   NA   NA   NA\n[2,]   NA   NA   NA   NA   NA   NA   NA\n[3,]   NA   NA   NA   NA   NA   NA   NA\n[4,]   NA   NA   NA   NA    8   NA   NA\n[5,]   NA   NA   NA   NA    7   NA   NA\n[6,]   NA   NA   NA   NA    6   NA   NA\n[7,]    1   NA    3    4    5   NA   NA\n```\n:::\n\n```{.r .cell-code}\ntM <- matrix_to_coords(tM) |> data.frame() |> filter(!is.na(data))\nhM <- matrix_to_coords(hM) |> data.frame() |> filter(!is.na(data))\n\nggplot() +\n  geom_point(aes(x = hM$col, y = -hM$row), size = 15, color = \"blue\") +\n  geom_label(aes(x = hM$col, y = -hM$row, label = hM$data), size = 5, fill = \"blue\") +\n  geom_point(aes(x = tM$col, y = -tM$row), size = 10, color = \"yellow\") +\n  geom_label(aes(x = tM$col, y = -tM$row, label = tM$data), size = 5, fill = \"yellow\")\n```\n\n::: {.cell-output-display}\n![](2022-09_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnrow(tM)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\n# stops |>\n#   unique() |>\n#   nrow()\n```\n:::\n\n::: {.cell hash='2022-09_cache/html/unnamed-chunk-5_c7653b5fe9c50b954f8c9e4182360636'}\n\n```{.r .cell-code}\nsize <- 13\n#   dt |>\n#   group_by(dir) |>\n#   summarise(mag = sum(mag)) |>\n#   pull(mag) |>\n#   max()\n# size <- 3144\nhM <- matrix(NA, size, size)\ntM <- hM\n\nsize <- ceiling(size / 2)\nhR <- size; hC <- size; \ntR <- size; tC <- size\n\nmove_h <- function(dir, mag, row, col) {\n  if (dir == \"R\") { return(list(\"row\" = row, \"col\" = col + mag)) }\n  if (dir == \"L\") { return(list(\"row\" = row, \"col\" = col - mag)) }\n  if (dir == \"U\") { return(list(\"row\" = row - mag, \"col\" = col)) }\n  if (dir == \"D\") { return(list(\"row\" = row + mag, \"col\" = col)) }\n}\n\nhM[hR,hC] <- 1\n\nhR1 <- hR; hC1 <- hC\nm <- move_h(dt$dir[1], dt$mag[1], hR, hC)\nhR <- m$row; hC <- m$col\n\nplane <- c(\"R\" = \"c\", \"L\" = \"c\", \"U\" = \"r\", \"D\" = \"r\")\n\nmove_t <- function(hR, hC, row, col) {\n  return(list(\"row\" = hR, \"col\" = hC))\n}\n\nis_diag <- function(hR, hC, tR, tC) {\n  if ((hR == tR & hC != tC) | (hR != tR & hC == tC)) {\n    return(TRUE)\n  }\n  # if(abs(tR - hR) == abs(tC - hC)) { return(FALSE) }\n  return(FALSE)\n}\n\ntR1 <- tR; tC1 <- tC\n\n# for(i in 2:nrow(dt)) {\nsapply(2:7, \\(i) {\n  hM[hR,hC] <<- i\n  tM[tR,tC] <<- i\n  \n  print(i)\n\n  m <- NULL\n\n  # if ((sqrt(abs(tC - hC)^2 + abs(tR - hR)^2) > 2)) {\n  #   m <- move_t(hR1, hC1, tR, tC)\n  #   tR <<- m$row; tC <<- m$col\n  #   stops <<- rbind(stops, data.frame(\"row\" = tR, \"col\" = tC))\n  #   tM[tR,tC] <<- i\n  #   m <- move_t(hR, hC, tR, tC)\n  # } else if (plane[dt$dir[i]] == plane[dt$dir[i-1]]) {\n  #   m <- move_t(hR, hC, tR, tC)\n  # } else if ((sqrt(abs(tC - hC)^2 + abs(tR - hR)^2) > 1)) {\n  #   m <- move_t(hR1, hC1, tR, tC)\n  # }\n  # # if (abs(hR - tR) == abs(hC - tC)) { m <- NULL }\n  adj <- get_adjacent_values(tR, tC, hM)[-c(1,3,7,9)]\n  adj <- adj[!is.na(adj)]\n  j <- i - 1\n  print(adj)\n  if (length(adj) > 0 & !(j %in% adj)) {\n    print(\"here\")\n    # m <- move_t(hR1, hC1, tR, tC)\n    m <- move_t(hR, hC, tR, tC)\n  } else {\n    # m <- move_h(dt$dir[i-1], dt$mag[i-1], tR, tC)\n  }\n  if (!is.null(m)) {\n  tR <<- m$row; tC <<- m$col\n  tM[tR, tC] <<- i\n  }\n  \n  hR1 <<- hR; hC1 <<- hC\n  m <- move_h(dt$dir[i], dt$mag[i], hR, hC)\n  hR <<- m$row; hC <<- m$col\n  return(1)\n}) |> invisible()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n[1] 1 2\n[1] 3\n[1] 1 2\n[1] 4\n[1] 1 2\n[1] \"here\"\n[1] 5\n[1] 3 4 5\n[1] 6\n[1] 3 4 5\n[1] 7\n[1] 3 4 5\n[1] \"here\"\n```\n:::\n\n```{.r .cell-code}\nprint(tM[1:7,-1:-6])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]   NA   NA   NA   NA   NA   NA   NA\n[2,]   NA   NA   NA   NA   NA   NA   NA\n[3,]   NA   NA   NA   NA   NA   NA   NA\n[4,]   NA   NA   NA   NA   NA   NA   NA\n[5,]   NA   NA   NA   NA    7   NA   NA\n[6,]   NA   NA   NA   NA   NA   NA   NA\n[7,]    4   NA   NA    7   NA   NA   NA\n```\n:::\n\n```{.r .cell-code}\nprint(hM[1:7,-1:-6])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,]   NA   NA   NA   NA   NA   NA   NA\n[2,]   NA   NA   NA   NA   NA   NA   NA\n[3,]   NA   NA   NA   NA   NA   NA   NA\n[4,]   NA   NA   NA   NA   NA   NA   NA\n[5,]   NA   NA   NA   NA    7   NA   NA\n[6,]   NA   NA   NA   NA    6   NA   NA\n[7,]    1    2    3    4    5   NA   NA\n```\n:::\n\n```{.r .cell-code}\ntM <- matrix_to_coords(tM) |> data.frame() |> filter(!is.na(data))\nhM <- matrix_to_coords(hM) |> data.frame() |> filter(!is.na(data))\n\nggplot() +\n  geom_point(aes(x = hM$col, y = -hM$row), size = 20, color = \"blue\") +\n  geom_label(aes(x = hM$col, y = -hM$row, label = hM$data), size = 5, fill = \"blue\") +\n  geom_point(aes(x = tM$col, y = -tM$row), size = 10, color = \"yellow\") +\n  geom_label(aes(x = tM$col, y = -tM$row, label = tM$data), size = 5, fill = \"yellow\")\n```\n\n::: {.cell-output-display}\n![](2022-09_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnrow(tM)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\n# stops |>\n#   unique() |>\n#   nrow()\n```\n:::\n\n\n> 5491\n6798\n8032\n\n\n::: {.cell hash='2022-09_cache/html/unnamed-chunk-6_0cc8a6fe1ed36f4a03ae6f71d70c278b'}\n\n:::\n\n\n## Part 2\n\n\n::: {.cell hash='2022-09_cache/html/unnamed-chunk-7_5e91fa618f4688d3eae713999f389968'}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}