{
  "hash": "19241b03f1c78640a0cc198190ba36d5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"01: Calorie Counting\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(data.table)\n```\n:::\n\n\n\n\nMy initial thought was to use `data.table::fread` but that skipped the spaces in the input by default. `readLines` keeps the spaces so I switched to that right away.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndt <- readLines(\"input.txt\")\n```\n:::\n\n\n\n\n## Part 1\n\nThis was just a matter of getting a loop with a maximum value counter going. I knew from the get-go that I would need to use the global assignment operator inside the loop. For reasons I thought that naming my variable `sum` would work but got an error since that's a reserved word in R (duh!). Find+replace helped get that sorted but my inner loop logic was still wrong. I realized that I was missing an `else` case to catch any time the maximum hadn't changed, but the sum needed to be reset.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsm <- 0\nmaxsm <- 0\nfor (x in dt) {\n  x <- as.numeric(x)\n  if (!is.na(x)) {\n    sm <<- sm + x\n  } else if (sm > maxsm) {\n    maxsm <<- sm\n    sm <<- 0\n  } else {\n    sm <<- 0\n  }\n}\nmaxsm\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 68923\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\nComing out of Part 1 was really strong, especially on Day 1. Instead of saving just the max sum, I made it a vector to record all sums. Then I just need to sort it, get the top three values, and sum those.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsm <- 0\nmaxsm <- c()\nfor (x in dt) {\n  x <- as.numeric(x)\n  if (!is.na(x)) {\n    sm <<- sm + x\n  } else  {\n    maxsm <<- c(maxsm, sm)\n    sm <<- 0\n  }\n}\nsum(sort(maxsm, decreasing = TRUE)[1:3])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 200044\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}