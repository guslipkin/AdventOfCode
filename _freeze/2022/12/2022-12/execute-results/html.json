{
  "hash": "c9e5bdeb084937c79a5707a305ed2901",
  "result": {
    "markdown": "---\ntitle: \"2022-12: Hill Climbing Algorithm\"\nformat: html\neval: false\n---\n\n::: {.cell hash='2022-12_cache/html/unnamed-chunk-1_91492c5b05cb40d610ed5869e2994667'}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n```\n:::\n\n::: {.cell hash='2022-12_cache/html/unnamed-chunk-2_a37ccac33c309c510a5e9c0c2a8defbe'}\n\n```{.r .cell-code}\ndt <- \n  readLines(\"input2.txt\") |>\n  str_split(\"\", simplify = TRUE)\n```\n:::\n\n::: {.cell hash='2022-12_cache/html/unnamed-chunk-3_e965e7a3c612a5084d33448b5f2aa5b7'}\n\n```{.r .cell-code}\nlettersE <- c(\"S\", letters, \"E\")\nm <- apply(dt, c(1,2), \\(l) which(lettersE == l))\ne <- which(m == length(lettersE), arr.ind = TRUE)[1,]\n```\n:::\n\n::: {.cell hash='2022-12_cache/html/unnamed-chunk-4_fb48477617dc7e58f8e7354760dabf7b'}\n\n```{.r .cell-code}\n.lee <- function(.data, row, col, paths = NULL) {\n  if (is.null(paths)) { \n    paths <- matrix(0, nrow(.data), ncol(.data))\n    pts <- which(.data == min(.data), arr.ind = TRUE)[1,]\n    paths[pts[\"row\"], pts[\"col\"]] <- 1\n    return(.lee(.data, row, col, paths))\n  } else {\n    mPaths <- max(paths)\n    which(.data == mPaths, arr.ind = TRUE)\n    pts <- \n      which(.data == mPaths, arr.ind = TRUE) |>\n      apply(1, \\(x) {\n        get_adjacent_coords(x[\"row\"], x[\"col\"], data = .data)\n      }) %>%\n      do.call(rbind, .) |>\n      unique()\n      merge(which(.data == mPaths + 1, arr.ind = TRUE)) |>\n      as.matrix()\n    if (nrow(pts) > 0) {\n      for(i in 1:nrow(pts)) { paths[pts[i,\"row\"], pts[i,\"col\"]] <- mPaths + 1 }\n    }\n  }\n  print(paths)\n  if (paths[row, col] != 0) { return(paths) }\n  else { return(.lee(.data, row, col, paths)) }\n}\n\nl <- .lee(m, e[\"row\"], e[\"col\"])\nwhich(l == max(l), arr.ind = TRUE)\nmax(l)\n\nwhich(m == 2, arr.ind = TRUE) |>\n  apply(1, \\(x) {\n    get_adjacent_coords(x[\"row\"], x[\"col\"], data = m)\n  }) %>%\n  do.call(rbind, .) |>\n  unique()\n\nget_adjacent_coords(1,1,data = m) |>\n  merge(which(m == 2, arr.ind = TRUE)) |>\n  as.matrix()\n```\n:::\n\n\n53\n29\n\n\n::: {.cell hash='2022-12_cache/html/unnamed-chunk-5_f0bacb59e070cccd9da87fbf4060346d'}\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}