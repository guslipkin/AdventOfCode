{
  "hash": "12fa1fa4d51fdf4695e05180c1014878",
  "result": {
    "markdown": "---\ntitle: \"2020-07: Handy Haversacks\"\nformat: html\n---\n\n::: {.cell hash='2020-07_cache/html/unnamed-chunk-1_01f96be6784bc7c85e99b21cd8d89679'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.5.0 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\ndf <- read.csv(\"input.csv\")\n\ndf$child2C[as.character(df$child2C) == \" \"] <- NA\ndf$child3C[as.character(df$child3C) == \" \"] <- NA\ndf$child4C[as.character(df$child4C) == \" \"] <- NA\n```\n:::\n\n\n## Part 1\n\n\n::: {.cell hash='2020-07_cache/html/unnamed-chunk-2_ee63dd4e9f165415f0661b8443251572'}\n\n```{.r .cell-code}\nlongerDF <- data.frame(parent = \"\", nChild = 0, cChild = \"\")\n\nfor(col in seq(3, 9, by = 2)) {\n  for(r in 1:nrow(df)) {\n    if(!is.na(df[r,col-1]))\n      for(i in 1:df[r,col-1]) {\n        longerDF <- rbind(longerDF, data.frame(parent = df[r,1], \n                                               nChild = df[r,col-1], \n                                               cChild = df[r,col]))\n    }\n  }\n}\nlongerDF <- longerDF[-1,]\n```\n:::\n\n::: {.cell hash='2020-07_cache/html/unnamed-chunk-3_a0c452ef1385c8e0ee584e0ece0f1ad8'}\n\n```{.r .cell-code}\nshinygoldDF <- \n  longerDF[longerDF$cChild == \"shiny gold\" | longerDF$parent == \"shiny gold\",]\n```\n:::\n\n::: {.cell hash='2020-07_cache/html/unnamed-chunk-4_53afc43baf2343498501f52d203dc4ae'}\n\n```{.r .cell-code}\nlevel <- c(\"shiny gold\")\noldRows <- 0\n\nwhile(oldRows != nrow(shinygoldDF)) {\n  oldRows <- nrow(shinygoldDF)\n  level <- unlist(shinygoldDF$parent)\n  shinygoldDF <-\n    df[as.character(df$parent) %in% level |\n         as.character(df$child1C) %in% level |\n         as.character(df$child2C) %in% level |\n         as.character(df$child3C) %in% level |\n         as.character(df$child4C) %in% level, ]\n}\nnrow(shinygoldDF) - 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 164\n```\n:::\n:::\n\n\n## Part 2\n\n::: {.callout-caution}\n\nThis solution is still under construction.\n\n:::\n\n\n::: {.cell hash='2020-07_cache/html/unnamed-chunk-5_4098be032a365e46d8639dc08e7b7caa'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(data.table)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'data.table'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:purrr':\n\n    transpose\n```\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(foreach)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'foreach'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:purrr':\n\n    accumulate, when\n```\n:::\n:::\n\n::: {.cell hash='2020-07_cache/html/unnamed-chunk-6_1af42d1630ced99d25d35e4dbed5cc47'}\n\n```{.r .cell-code}\ndf <- readLines(\"test.txt\")\ndt <- data.table(\"parent\" = \"\", \"child\" = \"\")\n# str_split(df, \" bags contain | bags, | bags\\\\.\")\nbags <- \n  str_extract_all(df, \"(no other|\\\\d) (\\\\w* \\\\w*)|(\\\\w* \\\\w*) bags\") |>\n  lapply(\\(x) {\n    l <- sapply(x[-1], \\(y) {\n        if (y == \"no other bags\") { return(y) }\n        count <- as.numeric(str_extract_all(y, \"\\\\d \")[[1]])\n        y <- rep(gsub(\"\\\\d \", \"\", y), count)\n        return(y)\n      })\n    \n      if (is.matrix(l)) { l <- as.vector(l) }\n    \n      l <-\n        l |>\n        unname() |>\n        unlist() |>\n        list() |>\n        `names<-`(gsub(\" bags\", \"\", x[1]))\n      \n      return(l)\n  }) |>\n  unlist(recursive = FALSE) |>\n  lapply(\\(x) {\n    if (any(grepl(\"shiny gold\", x))) { return(NULL) }\n    x\n  })\n\nbags <- bags[!sapply(bags, is.null)]\n\n# bags |>\n#   unlist() |>\n#   data.frame() |>\n#   rownames_to_column() |>\n#   filter(rowname == \"shiny gold\" | unlist.bags. == \"shiny gold\")\n\n# get_contents <- function(bag, pBag = \"shiny gold\") {\n#   if (is.null(bag) | length(bag) == 0 | any(grepl(\"no other bags\", bag))) { return(pBag) }\n#   else { lapply(bag, \\(n) get_contents(bags[[n]], pBag = n)) |> unlist() }\n# \n# }\n\nget_contents <- function(.x, .y) {\n  bag <- .x\n  pBag <- .y\n  if (pBag %in% names(which(bags == \"no other bags\"))) { return(get_contents(.y, \"no other bags\")) }\n  furrr:::future_map2(bags[[bag]], pBag, \\(.x, .y) { get_contents(.x, .y) })\n}\n\nn <- names(bags)\nn <- c(\"shiny gold\", n[n != \"shiny gold\"])\n\nl <-\n  lapply(n, \\(x) {\n    bags[[x]] |>\n      list() |>\n      `names<-`(x)\n  }) |>\n  # unlist(recursive = FALSE) |>\n  lapply(\\(x) {\n    y <- unlist(x)\n    names(y) <- c(rep(names(x), length(y)))\n    \n    y\n  }) |>\n  unlist() |> \n  as.list()\nfuture::plan(\n  list(future::tweak(future::multicore, workers = 12)),\n  list(future::tweak(future::sequential))\n)\n\nprogressr::with_progress({\n  p <- progressr::progressor(steps = length(l))\n  l <-\n    furrr::future_map2(l, names(l), \\(.x, .y) {\n      p()\n      bag <- get_contents(.x, .y)\n      if (is.null(bag)) { bag <- .x }\n      else { bag <- .y }\n      return(bag)\n      })\n})\n\nl |> unlist(recursive = FALSE)\n\n# tb <-\n#   table(bags[[\"shiny gold\"]]) |>\n#   data.frame() |>\n#   `colnames<-`(c(\"parent\", \"n\"))\n# \n# # l\n# data.frame(\"parent\" = names(l), \"child\" = l) |>\n#   mutate(parent = str_remove_all(parent, \"\\\\d\")) |>\n#   filter(parent == \"shiny gold\") |>\n#   nrow()\n# \n# bags[[\"dark red\"]]\n```\n:::\n\n::: {.cell hash='2020-07_cache/html/unnamed-chunk-7_7137e17d57f545e93517388f3866b732'}\n\n```{.r .cell-code}\ndf <- readLines(\"input.txt\")\ndt <- data.table(\"parent\" = \"\", \"child\" = \"\")\n# str_split(df, \" bags contain | bags, | bags\\\\.\")\nbags <- \n  str_extract_all(df, \"(no other|\\\\d) (\\\\w* \\\\w*)|(\\\\w* \\\\w*) bags\") |>\n  lapply(\\(x) {\n    l <- sapply(x[-1], \\(y) {\n        if (y == \"no other bags\") { return(y) }\n        count <- as.numeric(str_extract_all(y, \"\\\\d \")[[1]])\n        y <- rep(gsub(\"\\\\d \", \"\", y), count)\n        return(y)\n      })\n    \n      if (is.matrix(l)) { l <- as.vector(l) }\n    \n      l <-\n        l |>\n        unname() |>\n        unlist() |>\n        list() |>\n        `names<-`(gsub(\" bags\", \"\", x[1]))\n      \n      return(l)\n  }) |>\n  unlist(recursive = FALSE) |>\n  lapply(\\(x) {\n    if (any(grepl(\"shiny gold\", x))) { return(NULL) }\n    x\n  })\n\nbags <- bags[!sapply(bags, is.null)]\n\nno_others <- names(which(bags == \"no other bags\"))\n\nget_contents <- function(bag, pBag = \"shiny gold\") {\n  print(paste(bag, pBag))\n  if (length(pBag) == 0 | pBag %in% no_others) { return(c(\"no other bags\" = pBag)) }\n  # bag <- bag[!(bag %in% names(which(bags == \"no other bags\")))]\n  # lapply(bag, \\(n) list(n, get_contents(bags[[n]], pBag = n)))\n  # print(unique_bag)\n  get_contents(bag, pBag = names(bag))\n}\n\nn <- names(bags)\nn <- c(\"shiny gold\", n[n != \"shiny gold\"])\n\nl <-\n  lapply(n, \\(x) {\n    bags[[x]] |>\n      list() |>\n      `names<-`(x)\n  }) |>\n  # unlist(recursive = FALSE) |>\n  lapply(\\(x) {\n    y <- unlist(x)\n    names(y) <- c(rep(names(x), length(y)))\n    \n    y\n  }) |>\n  unlist() |> \n  as.list()\n\nlapply(l, \\(l) { get_contents(l, \"shiny gold\") })\n\nlapply(l, \\(l) {  })\n\ncl <- parallel::makeCluster(6)\nparallel::clusterExport(cl, c(\"bags\", \"l\", \"get_contents\"))\nl <- \n  pbapply::pblapply(l, get_contents, cl = cl) |>\n  unlist()\nparallel::stopCluster(cl)\n\ntb <-\n  table(bags[[\"shiny gold\"]]) |>\n  data.frame() |>\n  `colnames<-`(c(\"parent\", \"n\"))\n\n# l\ndata.frame(\"parent\" = names(l), \"child\" = l) |>\n  mutate(parent = str_remove_all(parent, \"\\\\d\")) |>\n  filter(parent == \"shiny gold\") |>\n  nrow()\n```\n:::\n\n::: {.cell hash='2020-07_cache/html/unnamed-chunk-8_8ea81bd2b09fa4d86578f7edde933b04'}\n\n```{.r .cell-code}\ndf <- readLines(\"input.txt\")\ndt <- data.table(\"parent\" = \"\", \"child\" = \"\")\n# str_split(df, \" bags contain | bags, | bags\\\\.\")\nbags <- \n  str_extract_all(df, \"(no other|\\\\d) (\\\\w* \\\\w*)|(\\\\w* \\\\w*) bags\") |>\n  lapply(\\(x) {\n    l <- sapply(x[-1], \\(y) {\n        if (y == \"no other bags\") { return(y) }\n        count <- as.numeric(str_extract_all(y, \"\\\\d \")[[1]])\n        y <- rep(gsub(\"\\\\d \", \"\", y), count)\n        return(y)\n      })\n    \n      if (is.matrix(l)) { l <- as.vector(l) }\n    \n      l <-\n        l |>\n        unname() |>\n        unlist() |>\n        list() |>\n        `names<-`(gsub(\" bags\", \"\", x[1]))\n      \n      return(l)\n  }) |>\n  unlist(recursive = FALSE) |>\n  lapply(\\(x) {\n    if (any(grepl(\"shiny gold|no other bags\", x))) { return(NULL) }\n    x\n  })\n\nbags <- bags[!sapply(bags, is.null)]\n\n# bags |>\n#   unlist() |>\n#   data.frame() |>\n#   rownames_to_column() |>\n#   filter(rowname == \"shiny gold\" | unlist.bags. == \"shiny gold\")\n\n# get_contents <- function(bag, pBag = \"shiny gold\") {\n#   if (is.null(bag) | length(bag) == 0 | any(grepl(\"no other bags\", bag))) { return(pBag) }\n#   else { lapply(bag, \\(n) get_contents(bags[[n]], pBag = n)) |> unlist() }\n# \n# }\n\nget_contents <- function(bag, pBag = \"shiny gold\") {\n  if (pBag %in% names(which(bags == \"no other bags\"))) { return(c(\"no other bags\" = pBag)) }\n  bag <- bag[!(bag %in% names(which(bags == \"no other bags\")))]\n  # lapply(bag, \\(n) list(n, get_contents(bags[[n]], pBag = n)))\n  length_bag <- length(bag)\n  unique_bag <- unique(bag)\n  # print(unique_bag)\n  unique_bag <- lapply(unique_bag, \\(n) list(n, get_contents(bags[[n]], pBag = n)))\n  rep(unique_bag, length_bag)\n}\n\n# get_contents <- function(bag, pBag = \"shiny gold\") {\n#   if (pBag %in% names(which(bags == \"no other bags\"))) { return(c(\"no other bags\" = pBag)) }\n#   bag <- bag[!(bag %in% names(which(bags == \"no other bags\")))]\n#   lapply(bag, \\(n) list(n, get_contents(bags[[n]], pBag = n)))\n# }\n\nn <- names(bags)\nn <- c(\"shiny gold\", n[n != \"shiny gold\"])\n\nl <-\n  lapply(n, \\(x) {\n    bags[[x]] |>\n      list() |>\n      `names<-`(x)\n  }) |>\n  unlist(recursive = FALSE)\n\ncl <- parallel::makeCluster(6)\nparallel::clusterExport(cl, c(\"bags\", \"l\", \"get_contents\"))\nl <- \n  pbapply::pblapply(l, get_contents, cl = cl) |>\n  unlist()\nparallel::stopCluster(cl)\n\ntb <-\n  table(bags[[\"shiny gold\"]]) |>\n  data.frame() |>\n  `colnames<-`(c(\"parent\", \"n\"))\n\n# l\ndata.frame(\"parent\" = names(l), \"child\" = l) |>\n  mutate(parent = str_remove_all(parent, \"\\\\d\")) |>\n  filter(parent == \"shiny gold\") |>\n  nrow()\n```\n:::\n\n\n6268\n6286\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}