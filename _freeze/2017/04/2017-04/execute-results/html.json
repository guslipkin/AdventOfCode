{
  "hash": "fb261c55a41d3502085a4bfa5c6f5c04",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"04: High-Entropy Passphrases\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n```\n:::\n\n\n\n\n## Part 1\n\nEasy enough. I wanted to do it in one pipe-line, but couldn't think of anything efficient enough.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"input.txt\" |>\n  readLines() |>\n  map_lgl(\\(x) {\n    x <-\n      x |>\n      str_split_1(\" \") |>\n      table()\n    all(x == 1)\n  }) |>\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 477\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\nI thought this would be harder, but then I realized I can just sort each string then use table again.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"input.txt\" |>\n  readLines() |>\n  map_lgl(\\(x) {\n    x <-\n      x |>\n      str_split_1(\" \") |>\n      map_chr(\\(y) {\n        y |>\n          str_split_1(\"\") |>\n          sort() |>\n          paste0(collapse = \"\")\n      }) |>\n      table()\n    all(x == 1)\n  }) |>\n  sum()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 167\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}