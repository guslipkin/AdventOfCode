{
  "hash": "4991f9b6d10debcd13a6daa084a3702b",
  "result": {
    "markdown": "---\ntitle: \"08: I Heard You Like Registers\"\n---\n\n::: {.cell hash='2017-08_cache/html/unnamed-chunk-1_ef7a3dff59fab97c3b9db8dda72a7320'}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTo install `mistlecode` yourself, run `devtools::install_github('guslipkin/mistlecode')`.\n\n Also loading:  cipheR data.table dplyr purrr slider stringr tidyverse glue rlang R6\n```\n:::\n\n```{.r .cell-code}\ndt <- fread(\"input.txt\")\n```\n:::\n\n\n## Part 1\n\nThis was so much fun. I like that I had to hack around my computer a bit with the `proc` function to do the actual processing, but it's good to keep in my back pocket for later.\n\n\n::: {.cell hash='2017-08_cache/html/unnamed-chunk-2_beaa99e2cf3e18c8bade6f4ec98d46c4'}\n\n```{.r .cell-code}\nregisters <- \n  dt$V1 |>\n  unique() |>\n  sort()\nregisters <- \n  rep(0L, length(registers)) |>\n  as.list() |>\n  `names<-`(registers)\n\nfunctions <- list(\n  \"proc\" = \\(x, y) {\n    x <- str_match(x, \"([a-z]+) (inc|dec) (-?[0-9]+) if (.*)\")[1,-1]\n    iff <- eval(parse(text = glue(\"self${x[4]}\")))\n    if (iff) {\n      self[[x[1]]] <- self[[x[2]]](x[1], as.integer(x[3]))\n    }\n    private$.inc()\n  },\n  \"inc\" = \\(x, y) {\n    self[[x]] <- self[[x]] + y\n  },\n  \"dec\" = \\(x, y) {\n    self[[x]] <- self[[x]] - y\n  }\n)\n\nx <-\n  data.frame(\n    process = \"proc\",\n    instruction = readLines(\"input.txt\")\n    ) |>\n    t() |>\n    as.vector() |>\n    matrix(nrow = 2) |>\n    as.data.frame() |>\n    as.list()\na <- create_assembly(registers, functions)$run(x)\nas.list(a)[names(registers)] |>\n  unlist() |>\n  max()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2971\n```\n:::\n:::\n\n\n## Part 2\n\nHmmm. Okay. Small register and function mods and we're good to go!\n\n\n::: {.cell hash='2017-08_cache/html/unnamed-chunk-3_83b8f035d15f79af6aa93057c479ed15'}\n\n```{.r .cell-code}\nregisters$maximum_value <- 0L\n\nfunctions <- list(\n  \"proc\" = \\(x, y) {\n    x <- str_match(x, \"([a-z]+) (inc|dec) (-?[0-9]+) if (.*)\")[1,-1]\n    iff <- eval(parse(text = glue(\"self${x[4]}\")))\n    if (iff) {\n      self[[x[1]]] <- self[[x[2]]](x[1], as.integer(x[3]))\n      if (self[[x[1]]] > self$maximum_value) self$maximum_value <- self[[x[1]]]\n    }\n    private$.inc()\n  },\n  \"inc\" = \\(x, y) {\n    self[[x]] <- self[[x]] + y\n  },\n  \"dec\" = \\(x, y) {\n    self[[x]] <- self[[x]] - y\n  }\n)\n\ncreate_assembly(registers, functions)$run(x, target = \"maximum_value\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4254\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}