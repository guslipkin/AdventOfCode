{
  "hash": "048e1f43df43426c8a72b2070a0e79b0",
  "result": {
    "markdown": "---\ntitle: \"03: Spiral Memory\"\nformat: html\n---\n\n::: {.cell hash='2017-03_cache/html/unnamed-chunk-1_a838ade03e3c7e5e360cc129789ab9cc'}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTo install `mistlecode` yourself, run `devtools::install_github('guslipkin/mistlecode')`.\n\n Also loading:  cipheR data.table dplyr purrr slider stringr tidyverse glue\n```\n:::\n\n```{.r .cell-code}\ninput <- 265149\n```\n:::\n\n\n## Part 1\n\n\n::: {.cell hash='2017-03_cache/html/unnamed-chunk-2_6394092391b876429e66ba71325d0c9a'}\n\n```{.r .cell-code}\ngrid_dim <- ceiling(sqrt(input))\n\ndiff <- (grid_dim ^ 2) - input\n\nside <- case_when(\n  diff < grid_dim ~ \"bottom\",\n  diff >= grid_dim & diff < grid_dim * 2 ~ \"left\",\n  diff >= grid_dim * 2 & diff < grid_dim * 3 ~ \"top\",\n  diff >= grid_dim * 3 & diff < grid_dim * 4 ~ \"right\",\n)\n\nmid <- ((grid_dim - 1) / 2)\nabs((grid_dim - diff) - mid) + mid - 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 438\n```\n:::\n:::\n\n\n## Part 2\n\nI don't know why I struggled. This was actually kinda fun. Getting the logic for the movements was odd.\n\n\n::: {.cell hash='2017-03_cache/html/unnamed-chunk-3_de7df77f15c651aa676e868087d04394'}\n\n```{.r .cell-code}\nm <- matrix(1, 1, 1)\npoint = list(x = 1, y = 1)\nrepeat {\n  if (point$y == nrow(m) & point$x == ncol(m)) {\n    tmp <- matrix(NA_integer_, ncol(m) + 2, nrow(m) + 2)\n    tmp[2:(nrow(tmp) - 1), 2:(ncol(tmp) - 1)] <- m\n    m <- tmp\n    point$x <- point$x + 2\n    point$y <- point$y + 1\n  } else if (point$x == ncol(m) & point$y != 1) {\n    point$y <- point$y - 1\n  } else if (point$x <= ncol(m) & point$y == 1 & point$x - 1 >= 1) {\n    point$x <- point$x - 1\n  } else if (point$x == 1 & point$y >= 1 & point$y + 1 <= nrow(m)) {\n    point$y <- point$y + 1\n  } else {\n    point$x <- point$x + 1\n  }\n  m[point$y, point$x] <-\n    sum(get_adjacent_values(point$y, point$x, m), na.rm = TRUE)\n  # print(m)\n  if (m[point$y, point$x] > input) break\n}\nmax(m, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 266330\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}