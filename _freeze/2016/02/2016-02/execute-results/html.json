{
  "hash": "605c1c1348d3389f2405f3fc749a6fb9",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2016-02: Bathroom Security\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(stringi)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndt <- fread(\"input.txt\", header = FALSE)\n```\n:::\n\n\n\n\n## Part 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat <- matrix(1:9, 3, 3)\n\nstartX <<- 2\nstartY <<- 2\napply(dt, 1, function(x) {\n  sapply(unlist(stri_match_all_regex(x, \"[ULRD]\")), function(y) {\n    if (y == \"U\") { startY <<- startY - 1 }\n    else if (y == \"D\") { startY <<- startY + 1 }\n    else if (y == \"L\") { startX <<- startX - 1 }\n    else { startX <<- startX + 1 }\n    \n    if(startX == 0) { startX <<- 1 }\n    else if (startX == 4) {startX <<- 3}\n    \n    if(startY == 0) { startY <<- 1 }\n    else if (startY == 4) {startY <<- 3}\n  })\n  return(rbind(startX, startY))\n}) |> \n  t() |>\n  apply(1, function(x) {\n    return(mat[x[1], x[2]])\n  }) |>\n  paste0(collapse = \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"82958\"\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmat <- as.matrix(fread(\"grid2.csv\", header = FALSE, na.strings = \"\"))\n\nstartX <<- 3\nstartY <<- 1\n\napply(dt, 1, function(x) {\n  sapply(unlist(stri_match_all_regex(x, \"[ULRD]\")), function(y) {\n    if (y == \"L\") { \n      startY <<- startY - 1\n      if (startY == 0 || is.na(mat[startX,startY])) { startY <<- startY + 1 }\n    } else if (y == \"R\") { \n      startY <<- startY + 1 \n      if (startY == 6 || is.na(mat[startX,startY])) { startY <<- startY - 1 }\n    } else if (y == \"U\") { \n      startX <<- startX - 1 \n      if (startX == 0 || is.na(mat[startX,startY])) { startX <<- startX + 1 }\n    } else { \n      startX <<- startX + 1 \n      if (startX == 6 || is.na(mat[startX,startY])) { startX <<- startX - 1 }\n    }\n  })\n  return(rbind(startX, startY))\n}) |> \n  t() |>\n  apply(1, function(x) {\n    return(mat[x[1], x[2]])\n  }) |>\n  paste0(collapse = \"\") |>\n  stri_replace_all_regex(\" \", \"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"B3DB8\"\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}