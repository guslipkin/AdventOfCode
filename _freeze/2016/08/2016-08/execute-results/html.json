{
  "hash": "872bd9f344ff6598d3d6f32fbaee378b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"08: Two-Factor Authentication\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mistlecode)\n\ndt <- readLines(\"input.txt\")\n```\n:::\n\n\n\n\n## Part 1\n\nA short ride on the struggle bus, but I actually really liked this one! And I found a better way to make cyclical vectors which is nice. I'll probably add it to `mistlecode`...\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- matrix(\" \", nrow = 6, ncol = 50)\n\ncycle <- function(x, n) {\n  n <- n %% length(x)\n  if (n == 0) x else c(tail(x, n), head(x, -n))\n}\n\nparse_input <- function(x) {\n  y <-\n    str_match(x, \"(\\\\d+)(x| by )(\\\\d+)\")[1, c(2, 4)] |>\n    as.numeric()\n  a <- y[1]; b <- y[2];\n  if (str_detect(x, \"rect\")) {\n    x <- \\(m) { m[1:b, 1:a] <- \"#\"; m; }\n  } else {\n    a <- a + 1\n    if (str_detect(x, \"rotate row\")) {\n      x <- \\(m) { m[a,] <- cycle(m[a,], b); m; }\n    } else if (str_detect(x, \"rotate col\")) {\n      x <- \\(m) { m[,a] <- cycle(m[,a], b); m; }\n    }\n  }\n  return(x)\n}\n\nf_dt <- map(dt, parse_input)\ni <- seq_along(f_dt)\nwhile (length(i) > 0) {\n  m <- f_dt[[i[1]]](m)\n  i <- i[-1]\n}\nsum(m == \"#\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 121\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\nPlotting for Advent is always fun! Just need to mess with the scaling a bit.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatrix_to_coords(m) |>\n  data.frame() |>\n  filter(data == \"#\") |>\n  mutate(across(row:col, as.numeric)) |>\n  ggplot() +\n  geom_tile(aes(x = col, y = -row)) +\n  theme_void() +\n  ylim(-18, 0)\n```\n\n::: {.cell-output-display}\n![](2016-08_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}