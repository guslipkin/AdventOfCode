{
  "hash": "53949e2149fbada213755396e1fcab8e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"05: How About a Nice Game of Chess?\"\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(mistlecode)\nlibrary(Rcpp)\nlibrary(digest)\n\ndt <- \"reyedfim\"\n```\n:::\n\n\n\n\nI initially did everything in pure `R`, but it was kinda slow and the solution seemed easy enough to dip my toes into `Rcpp`. All things considered, it went pretty smoothly. Some of the trickier bits were getting the `StringVector`<>`std::string` relationship straight, and not crashing everything when trying to sub-string a `StringVector` with `string_vector[x][y]` which is why I ended up just using `std::string`.\n\nAfter re-writing, I was able to speed up Part 1 by ~37 seconds and Part 2 by ~ 10 minutes...\n\n## Part 1\n\nThis isn't as bad as it looks. Only annoying thing was `serialize = FALSE` but StackOverflow cleared that up pretty quick.\n\n::: {.panel-tabset}\n\n### Rcpp\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncppFunction('\n  StringVector part1(StringVector dt) {\n    std::string string_x, dig, string_dt = as<std::string>(dt);\n    StringVector password(8);\n    int x = 0, j = 0, p_size = password.size();\n    Function md5(\"digest\");\n    Function paste0(\"paste0\");\n  \n    while (j < p_size) {\n      string_x = std::to_string(x);\n      dig = string_dt + string_x;\n      dig = as<std::string>(md5(dig, _[\"algo\"]=\"md5\", _[\"serialize\"]=0));\n      if (dig.substr(0, 5) == \"00000\") {\n        password[j] = dig.substr(5, 1);\n        j++;\n      }\n      //if (x % 100000 == 0) { std::cout << \"\\\\r\" << string_x << password; }\n      x++;\n    }\n    std::cout << std::endl;\n    return paste0(password, _[\"collapse\"]=\"\");\n  }\n')\npart1(dt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"f97c354d\"\n```\n\n\n:::\n:::\n\n\n\n\n### R\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 0\npassword <- c()\nwhile(length(password) != 8) {\n  dig <- \n    paste0(dt, x) |>\n    digest::digest(algo = \"md5\", serialize = FALSE)\n  if (substr(dig, 1, 5) == \"00000\") password <- c(password, substr(dig, 6, 6))\n  x <- x + 1\n}\npaste0(password, collapse = \"\")\n```\n:::\n\n\n\n\n:::\n\n## Part 2\n\nThat's not so bad. Just a few small changes and a lot slower...\n\n::: {.panel-tabset}\n\n### `Rcpp`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncppFunction('\n  StringVector part2(StringVector dt) {\n    std::string string_x, dig, string_dt = as<std::string>(dt);\n    StringVector password(8);\n    int x = 0, j = 0, p_size = password.size(), int_six;\n    Function md5(\"digest\");\n    Function paste0(\"paste0\");\n  \n    while (j < p_size) {\n      string_x = std::to_string(x);\n      dig = string_dt + string_x;\n      dig = as<std::string>(md5(dig, _[\"algo\"]=\"md5\", _[\"serialize\"]=0));\n      if (dig.substr(0, 5) == \"00000\") {\n        try { \n          int_six = stoi(dig.substr(5, 1)); \n        } catch(...) {\n          int_six = -1;\n        }\n        if (int_six > -1 && int_six < p_size && password[int_six] == \"\") {\n          password[int_six] = dig.substr(6, 1);\n          j++;\n        }\n      }\n      //if (x % 100000 == 0) { std::cout << \"\\\\r\" << string_x << password; }\n      x++;\n    }\n    std::cout << std::endl;\n    return paste0(password, _[\"collapse\"]=\"\");\n  }\n')\nold <- Sys.time()\npart2(dt)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"863dde27\"\n```\n\n\n:::\n\n```{.r .cell-code}\nSys.time() - old\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 5.57279 mins\n```\n\n\n:::\n:::\n\n\n\n\n### `R`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nold <- Sys.time()\nx <- 0\npassword <- rep(\"\", 8)\nwhile(any(password == \"\")) {\n  dig <- \n    paste0(dt, x) |>\n    digest::digest(algo = \"md5\", serialize = FALSE)\n  z <- \n    dig |>\n    substr(6, 6) |>\n    as.numeric() |>\n    suppressWarnings()\n  if (\n    substr(dig, 1, 5) == \"00000\" & !is.na(z) & \n    !is.na(password[z + 1]) & password[z + 1] == \"\") {\n    password[z + 1] <- substr(dig, 7, 7)\n  }\n  x <- x + 1\n}\npaste0(password, collapse = \"\")\nSys.time() - old\n```\n:::\n\n\n\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}