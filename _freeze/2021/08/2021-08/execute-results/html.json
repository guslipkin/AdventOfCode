{
  "hash": "f932f04cfb05459b2d8db6778bb6ad08",
  "result": {
    "markdown": "---\ntitle: \"2021-08: Seven Segment Search\"\nformat: html\n---\n\n::: {.cell hash='2021-08_cache/html/unnamed-chunk-1_1c0729577fe276ea4671f61e379c373a'}\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(tidyverse)\nlibrary(data.table)\n\ndt <- data.table::fread(\"input.txt\", header = FALSE)\n```\n:::\n\n\n## Part 1\n\n\n::: {.cell hash='2021-08_cache/html/unnamed-chunk-2_2f064a79b6072e03142ab5bdab7e1dff'}\n\n```{.r .cell-code}\ndt2 <- data.table(\"output\" = dt$V2)\ndt2 <- as.character(unlist(strsplit(dt2$output, \" \")))\nlength(dt2[nchar(dt2) %in% c(2, 3, 4, 7)])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 392\n```\n:::\n:::\n\n\n> This is how I laid out my positions\n\n![](layout.png)\n\n## Part 2\n\n\n::: {.cell hash='2021-08_cache/html/unnamed-chunk-3_83540019122c8896d57af6ed62a907d4'}\n\n```{.r .cell-code}\ndf <- data.table::fread(\"input.txt\", header = FALSE)\ndt1 <- data.table(\"input\" = df$V1)\ndt1 <- data.table(str_split(dt1$input, \" \", simplify = TRUE))\ndt2 <- data.table(\"output\" = df$V2)\ndt2 <- data.table(str_split(dt2$output, \" \", simplify = TRUE))\ndf <- cbind(dt1, dt2)\n\nsortV <- function(x) {\n  sapply(lapply(strsplit(x, NULL), sort), paste, collapse=\"\")\n}\n\ngetNumber <- function(x1) {\n  display <- c(\"p1\" = \"\",\n               \"p2\" = \"\",\n               \"p3\" = \"\",\n               \"p4\" = \"\",\n               \"p5\" = \"\",\n               \"p6\" = \"\",\n               \"p7\" = \"\")\n  x <- as.character(x1[1:10])\n  one <- \"\"\n  four <- \"\"\n  seven <- \"\"\n  eight <- \"\"\n  \n  for (i in 1:10) {\n    if (nchar(x[i]) == 2) one <- x[i]\n    if (nchar(x[i]) == 3) seven <- x[i]\n    if (nchar(x[i]) == 4) four <- x[i]\n    if (nchar(x[i]) == 7) eight <- x[i]\n  }\n  \n  # determine p1\n  display[\"p1\"] <- str_split(seven, \"\", simplify = TRUE)[\n    !(str_split(seven, \"\", simplify = TRUE) %in% \n        str_split(one, \"\", simplify = TRUE))]\n  \n  # determine p57\n  p57 <- paste0(seven, four, collapse = \"\")\n  p57 <- str_split(p57, \"\", simplify = TRUE)\n  p27 <- as.character(unlist(str_split(x[nchar(x) == 5], \"\")))\n  p27 <- p27[!(p27 %in% p57)]\n  display[\"p5\"] <- names(sort(table(p27)))[1]\n  display[\"p7\"] <- names(sort(table(p27)))[2]\n  \n  # determine p36\n  p24 <- str_split(eight, \"\", simplify = TRUE)[\n    !(str_split(eight, \"\", simplify = TRUE) %in% \n        str_split(one, \"\", simplify = TRUE))]\n  p24 <- p24[!(p24 %in% display)]\n  p <- as.character(unlist(str_split(x[nchar(x) == 6], \"\")))\n  p <- p[!(p %in% p24)]\n  p <- sort(table(p))\n  p36 <- p[(names(p) %in% str_split(one, \"\", simplify = TRUE))]\n  display[\"p3\"] <- names(p36)[1]\n  display[\"p6\"] <- names(p36)[2]\n  \n  # determine p24\n  p24 <- unlist(str_split(x[nchar(x) == 5], \"\"))\n  p24 <- sort(table(p24[!(p24 %in% display)]))\n  display[\"p2\"] <- names(p24)[1]\n  display[\"p4\"] <- names(p24)[2]\n  display\n  \n  zero <- paste0(sort(display[c(1:3,5:7)]), collapse = \"\")\n  one <- paste0(sort(display[c(3,6)]), collapse = \"\")\n  two <- paste0(sort(display[c(1,3,4:5,7)]), collapse = \"\")\n  three <- paste0(sort(display[c(1,3:4,6:7)]), collapse = \"\")\n  four <- paste0(sort(display[c(2:4,6)]), collapse = \"\")\n  five <- paste0(sort(display[c(1:2,4,6:7)]), collapse = \"\")\n  six <- paste0(sort(display[c(1:2,4:7)]), collapse = \"\")\n  seven <- paste0(sort(display[c(1,3,6)]), collapse = \"\")\n  eight <- paste0(sort(display[c(1:7)]), collapse = \"\")\n  nine <- paste0(sort(display[c(1:4,6:7)]), collapse = \"\")\n  \n  x <- as.character(x1[11:14])\n  x <- sapply(x, sortV)\n  \n  returnNumber <- function(x) {\n    return(case_when(\n      x == zero ~ 0,\n      x == one ~ 1,\n      x == two ~ 2,\n      x == three ~ 3,\n      x == four ~ 4,\n      x == five ~ 5,\n      x == six ~ 6,\n      x == seven ~ 7,\n      x == eight ~ 8,\n      x == nine ~ 9\n    ))\n  }\n  \n  x <- paste0(sapply(x, returnNumber), collapse = \"\")\n  return(as.numeric(x))\n}\n\nsum(apply(df, 1, getNumber))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1004688\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}