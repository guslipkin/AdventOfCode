{
  "hash": "915a1a1bad9adc0d4f15e81b5ca639b0",
  "result": {
    "markdown": "---\ntitle: \"2021-03: Binary Diagnostic\"\nformat: html\n---\n\n::: {.cell hash='2021-03_cache/html/unnamed-chunk-1_e39d6593a10cd09349252707af83a99e'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.4.0      ✔ purrr   0.3.5 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n```\n:::\n\n```{.r .cell-code}\nlibrary(data.table)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'data.table'\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\nThe following object is masked from 'package:purrr':\n\n    transpose\n```\n:::\n\n```{.r .cell-code}\nlibrary(compositions)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWelcome to compositions, a package for compositional data analysis.\nFind an intro with \"? compositions\"\n\n\nAttaching package: 'compositions'\n\nThe following objects are masked from 'package:stats':\n\n    anova, cor, cov, dist, var\n\nThe following objects are masked from 'package:base':\n\n    %*%, norm, scale, scale.default\n```\n:::\n:::\n\n\n## Part 1\n\n\n::: {.cell hash='2021-03_cache/html/unnamed-chunk-2_8ac45586c1f6326dbfee0af6d23bc6aa'}\n\n```{.r .cell-code}\n# part 1\ndt <- data.frame(fread(\"input.txt\", sep = \"\\n\", colClasses = c(\"character\")))\ndt <- tidyr::separate(dt, \"V1\", paste0(\"V\", 1:13), sep = \"\", convert = TRUE)\n\nget_mode <- function(x)\n  return(names(sort(table(x), decreasing = T, na.last = T)[1]))\no <- c()\nfor(i in 2:13)\n  o <- append(o, get_mode(dt[,i]))\n\no <- unbinary(paste(o, collapse = \"\"))\n\nget_mode <- function(x)\n  return(names(sort(table(x), na.last = T)[1]))\nc <- c()\nfor(i in 2:13)\n  c <- append(c, get_mode(dt[,i]))\nc <- unbinary(paste(c, collapse = \"\"))\n\no * c\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4174964\n```\n:::\n:::\n\n\n## Part 2\n\n\n::: {.cell hash='2021-03_cache/html/unnamed-chunk-3_486ec0c7aae5b839039c65cbf3dcbb33'}\n\n```{.r .cell-code}\n# part 2\ndtM <- data.frame(fread(\"input.txt\", sep = \"\\n\", colClasses = c(\"character\")))\ndtM <- tidyr::separate(dtM, \"V1\", paste0(\"V\", 1:13), sep = \"\", convert = TRUE)\ndtM <- dtM %>% select(-\"V1\")\ndt <- dtM\n\nget_modeMax <- function(x){\n  temp <- sort(table(x), decreasing = T, na.last = T)\n  ifelse(temp[1] == temp[2], return(1), names(temp[1]))\n}\no <- c()\n\nfor(i in 1:12) {\n  dt <- dt %>%\n    filter_at(i, all_vars(.==get_modeMax(dt[,i])))\n  if(nrow(dt) == 1) {\n    oxygen <- paste(as.character(dt[1,]), collapse = \"\")\n    break\n  }\n}\n\ndt <- dtM\nget_modeMin <- function(x){\n  temp <- sort(table(x), na.last = T)\n  ifelse(temp[1] == temp[2], return(0), names(temp[1]))\n}\nc <- c()\n\nfor(i in 1:12) {\n  dt <- dt %>%\n    filter_at(i, all_vars(.==get_modeMin(dt[,i])))\n  if(nrow(dt) == 1) {\n    co2 <- paste(as.character(dt[1,]), collapse = \"\")\n    break\n  }\n}\n\nunbinary(oxygen) * unbinary(co2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4474944\n```\n:::\n:::\n\n\n## Speed Edition\n\nToday was bad. I misread the instructions, forgot a bunch of basic functions, and so much more. ~~I couldn't get any of the base reading functions to read my input properly so I ended up with `fread` from `data.table`. I also haven't been able to make any significant speed improvements from my initial solution.~~\n\nI'm not sure why `readLines` wasn't working last night but I also switched to `str_split_fixed` from `stringr` and it's so much faster now.\n\n### Fastest solution\n\n\n::: {.cell hash='2021-03_cache/html/unnamed-chunk-4_58f62faa50106fe646b0733a14d237e5'}\n\n```{.r .cell-code}\nlibrary(dplyr)\n# part 1\ndt <- stringr::str_split_fixed(readLines(\"input.txt\"), pattern = \"\", n = 12)\ndt <- data.frame(apply(dt, 2, as.integer))\n\ngetModeMin <- function(x)\n  return(ifelse(mean(x) > .5, 0, 1))\ngetModeMax <- function(x)\n  return(ifelse(mean(x) > .5, 1, 0))\n\nstrtoi(paste(apply(dt, 2, getModeMax), collapse = \"\"), base = 2) *\n  strtoi(paste(apply(dt, 2, getModeMin), collapse = \"\"), base = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4174964\n```\n:::\n\n```{.r .cell-code}\n# part 2\ndto <- dt\ndtc <- dt\n\nfor (i in 1:12) {\n  if (nrow(dto) > 1)\n    dto <- dto |>\n      filter_at(i, all_vars(. == ifelse(mean(dto[, i]) >= .5, 1, 0)))\n  if (nrow(dtc) > 1)\n    dtc <- dtc |>\n      filter_at(i, all_vars(. == ifelse(mean(dtc[, i]) < .5, 1, 0)))\n}\n\nstrtoi(paste(as.character(dto[1,]), collapse = \"\"), base = 2) *\n  strtoi(paste(as.character(dtc[1,]), collapse = \"\"), base = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4474944\n```\n:::\n:::\n\n\n### Benchmarks\n\n\n::: {.cell hash='2021-03_cache/html/unnamed-chunk-5_1e7265fbc1754bba9980320940d8ca14'}\n\n```{.r .cell-code}\nrbenchmark::benchmark(\n  \"First try\" = {\n    library(tidyverse)\n    library(data.table)\n    library(compositions)\n    \n    # part 1\n    dt <- data.frame(fread(\"input.txt\", sep = \"\\n\", \n                           colClasses = c(\"character\")))\n    dt <- tidyr::separate(dt, \"V1\", paste0(\"V\", 1:13), \n                          sep = \"\", convert = TRUE)\n    \n    get_mode <- function(x)\n      return(names(sort(table(x), decreasing = T, na.last = T)[1]))\n    o <- c()\n    for (i in 2:13)\n      o <- append(o, get_mode(dt[, i]))\n    o <- unbinary(paste(o, collapse = \"\"))\n    \n    get_mode <- function(x)\n      return(names(sort(table(x), na.last = T)[1]))\n    c <- c()\n    for (i in 2:13)\n      c <- append(c, get_mode(dt[, i]))\n    c <- unbinary(paste(c, collapse = \"\"))\n    \n    o * c\n    \n    # part 2\n    dtM <- data.frame(fread(\"input.txt\", sep = \"\\n\",\n                            colClasses = c(\"character\")))\n    dtM <- tidyr::separate(dtM, \"V1\", paste0(\"V\", 1:13),\n                           sep = \"\", convert = TRUE)\n    dtM <- dtM %>% select(-\"V1\")\n    dt <- dtM\n\n    get_modeMax <- function(x) {\n      temp <- sort(table(x), decreasing = T, na.last = T)\n      ifelse(temp[1] == temp[2], return(1), names(temp[1]))\n    }\n    o <- c()\n    for (i in 1:12) {\n      dt <- dt %>% filter_at(i, all_vars(. == get_modeMax(dt[, i])))\n      if (nrow(dt) == 1) {\n        oxygen <- paste(as.character(dt[1, ]), collapse = \"\")\n        break\n      }\n    }\n\n    dt <- dtM\n    get_modeMin <- function(x) {\n      temp <- sort(table(x), na.last = T)\n      ifelse(temp[1] == temp[2], return(0), names(temp[1]))\n    }\n    c <- c()\n    for (i in 1:12) {\n      dt <- dt %>% filter_at(i, all_vars(. == get_modeMin(dt[, i])))\n      if (nrow(dt) == 1) {\n        co2 <- paste(as.character(dt[1, ]), collapse = \"\")\n        break\n      }\n    }\n\n    unbinary(oxygen) * unbinary(co2)\n    },\n    \"Second try\" = {\n      library(tidyverse)\n      library(data.table)\n      library(compositions)\n      \n      # part 1\n      dt <- fread(\"input.txt\", sep = \"\\n\", colClasses = c(\"character\")) %>%\n        as.data.frame() %>%\n        tidyr::separate(\"V1\", paste0(\"V\", 1:13), sep = \"\", convert = TRUE) %>%\n        select(-\"V1\")\n      \n      getModeMin <- function(x)\n        return(names(sort(table(x), na.last = T)[1]))\n      getModeMax <- function(x)\n        return(names(sort(\n          table(x), decreasing = T, na.last = T\n        )[1]))\n      \n      o <- unbinary(paste(apply(dt, 2, getModeMax), collapse = \"\"))\n      \n      c <- unbinary(paste(apply(dt, 2, getModeMin), collapse = \"\"))\n      \n      o * c\n      \n      # part 2\n      dtM <-\n        fread(\"input.txt\", sep = \"\\n\", colClasses = c(\"character\")) %>%\n        as.data.frame() %>%\n        tidyr::separate(\"V1\", paste0(\"V\", 1:13), sep = \"\", convert = TRUE) %>%\n        select(-\"V1\")\n      dto <- dtM\n      dtc <- dtM\n      \n      getModeMin <- function(x) {\n        temp <- sort(table(x), na.last = T)\n        ifelse(temp[1] == temp[2], return(0), names(temp[1]))\n      }\n      getModeMax <- function(x) {\n        temp <- sort(table(x), decreasing = T, na.last = T)\n        ifelse(temp[1] == temp[2], return(1), names(temp[1]))\n      }\n      \n      for (i in 1:12) {\n        if (nrow(dto) > 1)\n          dto <-\n            dto %>% filter_at(i, all_vars(. == getModeMax(dto[, i])))\n        if (nrow(dtc) > 1)\n          dtc <-\n            dtc %>% filter_at(i, all_vars(. == getModeMin(dtc[, i])))\n        if (nrow(dto) == 1 & nrow(dtc) == 1) {\n          oxygen <- paste(as.character(dto[1,]), collapse = \"\")\n          co2 <- paste(as.character(dtc[1,]), collapse = \"\")\n          break\n        }\n      }\n      \n      unbinary(oxygen) * unbinary(co2)\n    }, \n  \"Third try\" = {\n    library(dplyr)\n    # part 1\n    dt <- \n      stringr::str_split_fixed(readLines(\"input.txt\"), pattern = \"\", n = 12)\n    dt <- data.frame(apply(dt, 2, as.integer))\n    \n    getModeMin <- function(x)\n      return(ifelse(mean(x) > .5, 0, 1))\n    getModeMax <- function(x)\n      return(ifelse(mean(x) > .5, 1, 0))\n    \n    strtoi(paste(apply(dt, 2, getModeMax), collapse = \"\"), base = 2) *\n      strtoi(paste(apply(dt, 2, getModeMin), collapse = \"\"), base = 2)\n    \n    # part 2\n    dto <- dt\n    dtc <- dt\n    \n    for (i in 1:12) {\n      if (nrow(dto) > 1)\n        dto <- dto |>\n          filter_at(i, all_vars(. == ifelse(mean(dto[, i]) >= .5, 1, 0)))\n      if (nrow(dtc) > 1)\n        dtc <- dtc |>\n          filter_at(i, all_vars(. == ifelse(mean(dtc[, i]) < .5, 1, 0)))\n    }\n    \n    strtoi(paste(as.character(dto[1, ]), collapse = \"\"), base = 2) *\n      strtoi(paste(as.character(dtc[1, ]), collapse = \"\"), base = 2)\n  }, \n  replications = 100, columns = c(1:5), order = \"user.self\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        test replications user.self sys.self elapsed\n1  First try          100    17.482    0.416  17.911\n2 Second try          100    19.145    0.541  19.744\n3  Third try          100    20.151    0.360  20.539\n```\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}