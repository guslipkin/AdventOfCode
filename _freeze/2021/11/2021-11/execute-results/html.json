{
  "hash": "b8b3d7e0236a76c01f47facfcdcf953a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"2021-11: Dumbo Octopus\"\nformat: html\n---\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(data.table)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noctopusM <- readLines(\"input.txt\")\n```\n:::\n\n\n\n\n## Part 1\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noctopus <- octopusM |>\n  strsplit(\"\") %>%\n  do.call(rbind, .) |>\n  as.matrix() |>\n  apply(1, as.numeric) |>\n  t()\n\noctopusCol <- ncol(octopus)\noctopusRow <- nrow(octopus)\n\nflash_counter <- 0\n\nget_adjacent <- function(xx, yy, ncol, nrow) {\n  x <- xx; y <- yy\n  x <- (x-1):(x+1); y <- (y-1):(y+1)\n  \n  x <- x[sapply(x, \\(j) between(j, 1, ncol))]\n  y <- y[sapply(y, \\(j) between(j, 1, nrow))]\n\n  expand.grid(\"col\" = x, \"row\" = y) |>\n    filter(!(col == xx & row == yy)) |>\n    as.matrix()\n}\n\nfor(i in 1:100) {\n  octopus <- octopus + 1\n  \n  while(any(octopus > 9)) {\n    flash <- which(octopus > 9, arr.ind = TRUE)\n    octopus[octopus > 9] <- 0\n    for(x in 1:nrow(flash)) {\n      adj <- \n        get_adjacent(flash[x, \"col\"], flash[x, \"row\"], octopusCol, octopusRow)\n      \n      octopus[adj[,\"row\"], adj[,\"col\"]] <- \n        apply(octopus[adj[,\"row\"], adj[,\"col\"]], c(1, 2), \n              \\(x) { ifelse(x == 0, 0, x + 1) })\n    }\n  }\n  flash_counter <<- flash_counter + length(octopus[octopus == 0])\n}\nflash_counter\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1603\n```\n\n\n:::\n:::\n\n\n\n\n## Part 2\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noctopus <- octopusM |>\n  strsplit(\"\") %>%\n  do.call(rbind, .) |>\n  as.matrix() |>\n  apply(1, as.numeric) |>\n  t()\n\ni <- 1\n\nwhile(TRUE) {\n  octopus <- octopus + 1\n  \n  while(any(octopus > 9)) {\n    flash <- which(octopus > 9, arr.ind = TRUE)\n    octopus[octopus > 9] <- 0\n    for(x in 1:nrow(flash)) {\n      adj <- \n        get_adjacent(flash[x, \"col\"], flash[x, \"row\"], octopusCol, octopusRow)\n      \n      octopus[adj[,\"row\"], adj[,\"col\"]] <- \n        apply(octopus[adj[,\"row\"], adj[,\"col\"]], c(1, 2), \n              \\(x) { ifelse(x == 0, 0, x + 1) })\n    }\n  }\n  if (length(octopus[octopus == 0]) == octopusRow * octopusCol) {\n    print(i)\n    break\n  } else { i <- i + 1 }\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 222\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}