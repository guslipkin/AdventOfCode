{
  "hash": "a8ff2b992a293d6a8298abf78c18e416",
  "result": {
    "markdown": "---\ntitle: \"2021-02: Dive!\"\nformat: html\n---\n\n::: {.cell hash='2021-02_cache/html/unnamed-chunk-1_02a448c38ceb2ed19b48807535b100de'}\n\n```{.r .cell-code}\nlibrary(data.table)\nlibrary(tidyr)\n```\n:::\n\n\n## Part 1\n\n\n::: {.cell hash='2021-02_cache/html/unnamed-chunk-2_106d84083161ce1b7980340b4dde80b2'}\n\n```{.r .cell-code}\ndt <- data.table(read.table(\"input.txt\", sep = \"\\n\"))\ndt <- separate(dt, \"V1\", c(\"d\", \"n\"), sep = \" \", convert = TRUE)\ndt$n <- ifelse(dt$d == \"down\", dt$n * -1, dt$n)\n\nabs(dt[d == \"forward\", .(sum = sum(n))] * \n  as.numeric(dt[d != \"forward\", .(sum = sum(n))]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       sum\n1: 1635930\n```\n:::\n:::\n\n\n## Part 2\n\n\n::: {.cell hash='2021-02_cache/html/unnamed-chunk-3_04ad3b62d9b8d27068d40e33cc83c3f1'}\n\n```{.r .cell-code}\ndt <- data.table(read.table(\"input.txt\", sep = \"\\n\"))\ndt <- separate(dt, \"V1\", c(\"d\", \"n\"), sep = \" \", convert = TRUE)\n\ndt$aim <- ifelse(dt$d == \"up\" & dt$d != \"forward\", dt$n * -1, dt$n)\ndt$aim <- ifelse(dt$d == \"forward\", 0, dt$aim)\ndt$aim <- cumsum(dt$aim)\n\ndt$h <- ifelse(dt$d == \"forward\", dt$n, 0)\ndt$depth <- ifelse(dt$d == \"forward\", dt$aim * dt$n, 0)\n\nsum(dt$h, na.rm = TRUE) * sum(dt$depth, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1781819478\n```\n:::\n:::\n\n\n## Speed Edition\n\nBase R once again beats out data.table by just a little bit. The big difference here was moving from `colSums` to `sum`, although `readLines` instead of `fread` does play a part.\n\n### Fastest solution\n\n\n::: {.cell hash='2021-02_cache/html/unnamed-chunk-4_aa4b1d8fb9997258c361665e115ad200'}\n\n```{.r .cell-code}\ndtM <- data.frame(\"V1\" = readLines(\"input.txt\"))\ndtM <- tidyr::separate(dtM, \"V1\", c(\"d\", \"n\"), sep = \" \", convert = TRUE)\n\n# part 1\ndt <- dtM\ndt$n <- ifelse(dt$d == \"down\", dt$n * -1, dt$n)\nabs(sum(dt$n[dt$d == \"forward\"]) * sum(dt$n[dt$d != \"forward\"]))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1635930\n```\n:::\n\n```{.r .cell-code}\n# part 2\ndt <- dtM\ndt$aim <- cumsum(ifelse(dt$d == \"up\", dt$n * -1, \n                        ifelse(dt$d == \"forward\", 0, dt$n)))\nsum(ifelse(dt$d == \"forward\", dt$n, 0), na.rm = TRUE) *\n  sum(ifelse(dt$d == \"forward\", dt$aim * dt$n, 0), na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1781819478\n```\n:::\n:::\n\n\n### Benchmarks\n\n\n::: {.cell hash='2021-02_cache/html/unnamed-chunk-5_01774f986a6144af76396bbd52c3dcd8'}\n\n```{.r .cell-code}\nrbenchmark::benchmark(\n  \"First try\" = {\n    library(data.table)\n    # part 1\n    dt <- data.table(read.table(\"input.txt\", sep = \"\\n\"))\n    dt <- tidyr::separate(dt, \"V1\", c(\"d\", \"n\"), sep = \" \", convert = TRUE)\n    dt$n <- ifelse(dt$d == \"down\", dt$n * -1, dt$n)\n\n    abs(dt[d == \"forward\", .(sum = sum(n))] * \n          as.numeric(dt[d != \"forward\", .(sum = sum(n))]))\n    \n    # part 2\n    dt <- data.table(read.table(\"input.txt\", sep = \"\\n\"))\n    dt <- tidyr::separate(dt, \"V1\", c(\"d\", \"n\"), sep = \" \", convert = TRUE)\n\n    dt$aim <- ifelse(dt$d == \"up\" & dt$d != \"forward\", dt$n * -1, dt$n)\n    dt$aim <- ifelse(dt$d == \"forward\", 0, dt$aim)\n    dt$aim <- cumsum(dt$aim)\n\n    dt$h <- ifelse(dt$d == \"forward\", dt$n, 0)\n    dt$depth <- ifelse(dt$d == \"forward\", dt$aim * dt$n, 0)\n    \n    sum(dt$h, na.rm = TRUE) * sum(dt$depth, na.rm = TRUE)\n    },\n  \"Base R\" = {\n    dtM <- data.frame(\"V1\" = readLines(\"input.txt\"))\n    dtM$n <- na.omit(as.numeric(unlist(strsplit(dtM$V1, \" \"))))\n    dtM$d <- as.character(unlist(strsplit(dtM$V1, \" \")))[\n      is.na(as.numeric(unlist(strsplit(dtM$V1, \" \"))))]\n    \n    # part 1\n    dt <- dtM\n    dt$n <- ifelse(dt$d == \"down\", dt$n * -1, dt$n)\n    abs(sum(dt$n[dt$d == \"forward\"]) * sum(dt$n[dt$d != \"forward\"]))\n    \n    # part 2\n    dt <- dtM\n    dt$aim <- cumsum(ifelse(dt$d == \"up\", dt$n * -1, \n                            ifelse(dt$d == \"forward\", 0, dt$n)))\n    sum(ifelse(dt$d == \"forward\", dt$n, 0), na.rm = TRUE) * \n      sum(ifelse(dt$d == \"forward\", dt$aim * dt$n, 0), na.rm = TRUE)\n    },\n  \"data.table\" = {\n    library(data.table)\n    dtM <- fread(\"input.txt\", sep = \"\\n\", header = FALSE)\n    dtM <- tidyr::separate(dtM, \"V1\", c(\"d\", \"n\"), sep = \" \", convert = TRUE)\n\n    # part 1\n    dt <- dtM\n    dt$n <- ifelse(dt$d == \"down\", dt$n * -1, dt$n)\n    abs(colSums(dt[d == \"forward\", .(n)]) * colSums(dt[d != \"forward\", .(n)]))\n    \n    # part 2\n    dt <- dtM\n    dt$aim <- cumsum(ifelse(dt$d == \"up\", dt$n * -1, \n                            ifelse(dt$d == \"forward\", 0, dt$n)))\n    sum(ifelse(dt$d == \"forward\", dt$n, 0), na.rm = TRUE) * \n      sum(ifelse(dt$d == \"forward\", dt$aim * dt$n, 0), na.rm = TRUE)\n    },\n  replications = 100, columns = c(1:5), order = \"user.self\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n        test replications user.self sys.self elapsed\n2     Base R          100     0.228    0.007   0.234\n3 data.table          100     0.829    0.056   0.885\n1  First try          100     1.588    0.117   1.706\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}